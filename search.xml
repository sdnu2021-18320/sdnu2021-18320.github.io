<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HNMLWithSkTfReadNote</title>
      <link href="/2021/05/01/HNMLWithSkTfReadNote/"/>
      <url>/2021/05/01/HNMLWithSkTfReadNote/</url>
      
        <content type="html"><![CDATA[<h3 id="第10章"><a href="#第10章" class="headerlink" title="第10章"></a>第10章</h3><h4 id="调参"><a href="#调参" class="headerlink" title="调参"></a>调参</h4><blockquote><p>1、要调哪些参数<br>2、各个参数调试的一般性方法是什么<br>可以调的参数：网络结构，神经网络的层数，每层中神经元的个数，每层的激活函数，权重的初始化方法</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读笔记的博客框架</title>
      <link href="/2021/04/26/PaperReadBlogFramework/"/>
      <url>/2021/04/26/PaperReadBlogFramework/</url>
      
        <content type="html"><![CDATA[<p>排版要求：<br>1.大小标题安排。</p><p>2.段落与段落之间的空行安排<br>3.强调字体的安排<br>4.参考内容的安排</p><p>反思的问题<br>1.这篇文章与我的研究内容是否相关？<br>2.采用的方法是否新颖，我是否感兴趣？<br>3.他的结果，是我想要的么？<br>以上三个问题，可以变化你阅读论文心中所带的问题，即：<br>1.他是如何把这种方法运用到这类问题中的？（学习）<br>2.它的结果完美么？是否是充分必要的？保守性强不强？有没有可以改进的地方？（总结+反思）<br>所以，阅读论文的Abstract，实际是你为阅读论文所做的最重要的准备工作，带着问题去读论文才最有效率，万万不可跳过Abstract。</p><h2 id="精读文献的博客框架："><a href="#精读文献的博客框架：" class="headerlink" title="精读文献的博客框架："></a>精读文献的博客框架：</h2><p>通过阅读文章宏观上必须回答的问题：<br>1.这篇文章研究了什么（为什么研究这个或者说解决了什么问题）<br>2.作者的灵感来自于哪里（这个可以启发自己应该怎么思考，怎么问问题）<br>3.采用了什么方法（为什么采用这个方法，方法的优势在哪里）<br>4.得到了什么结果（结果好在哪里）<br>5.方法的具体实现是什么（在实现上用什么技术解决了什么问题）<br>6.实验的设计细节是什么</p><p>##摘要<br>（这部分从宏观上回答这篇文章研究了什么，采用了什么方法，得到了什么样的结果。这部分通常只是几句话简短的概括，甚至连方法的主要脉络都不必说出，只能说出方法的大致思路。这部分下面不设子标题。结束后，与后面的部分隔一个空行。这部分一般不分段。）</p><p>##引言<br>##方法<br>###方法的宏观设计<br>###方法的具体实现<br>##实验<br>下面一层的子标题用于写对比实验，以及具体的实验<br>###<br>##</p><h2 id="略读文献的博客框架："><a href="#略读文献的博客框架：" class="headerlink" title="略读文献的博客框架："></a>略读文献的博客框架：</h2><h2 id="调研文献的博客框架："><a href="#调研文献的博客框架：" class="headerlink" title="调研文献的博客框架："></a>调研文献的博客框架：</h2><h2 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a>经验之谈</h2><p>1、看摘要，抓住摘要中重点内容，看与自己研究的内容相关度有多大，从而决定是不是要继续读下去。<br>2、阅读小标题。在小标题的引导下，找寻对自己有用的信息。<br>3、重视文献综述的作用。里面会提到许多代表性的人物和工作。<br>4、仅次于摘要的Introduction和Conclusion部分，通过精读来进一步把握文章。<br>5、1. 找大牛。所谓大牛就是你读的书里经常出现的人物的名字啦。2. 找近期。一般2000年之前的，不是很系统的著作我都不会去看。这一条特别适用于期刊论文，年代越久远的期刊文献，除非是特别特别有名的很多论文引用过的文献之外，其他的都价值较低。3. 找Topic。最好是能跟你研究的东西100%单词吻合的书籍。最好也是2000年以后的。<br>6、如何判断手头的这篇文献和自己的领域相关值得精度？<br>7、读懂的定义是什么？读到什么程度（依据这个来指导博客框架）</p><p>确定这篇论文是否值得花费时间<br>1、初筛论文<br>抓住标题和关键字。初步判断相关度，然后看摘要，可以对文章有大致的了解。调到结论，通过结论可以判断是不是与自己相关的论文。如果不相关可以直接跳过。<br>2、阅读文章<br>初步阅读文章，来判断论文是否值得精读。最高效的方式是，先扫一遍图表以及他们的标题、图注，对于文章的数据内容有一个自己的初判，科研小白们可以考察一下自己对于图表的解读是否和后面即将读到的文章内容一致。引言&lt;部分，可以了解研究开展的背景，以及为什么作者要展开这项研究。通过这两部分的阅读可以帮助读者进一步了解该项研究的内容和目标，通过和自身科研课题的对比来确定是到此为止，还是精读剩下的章节。<br>3、精读文章<br>了解文章的细节信息，包括实验具体步骤等，对于自身科研项目的开展设计有重要参考价值。深度挖掘文章的结果和讨论部分，尤其是实验部分。通过对细节信息的研读，我们能够了解作者是如何开展实验，获取初始数据，进行数据分析，解读数据内涵等等。一篇优秀的、和自己科研课题高度相关的文献是值得精读的，但切忌从头精读到结尾，这样容易让自己迷失在细节中无法高屋建瓴地去把握文章的中心和重点。<br>4、做笔记<br>做笔记要使用文献管理软件。初涉科研的小白，文献阅读能力和论文写作能力比较欠缺，那么可以在笔记中用一句话（英文）概括实验、结果、讨论章节中的每一段内容，组成一个阅读笔记这样既可以锻炼英语书写表达能力，也可以逼迫自己在理解的基础上进行一定量的输出，这是一个加深理解和记忆的过程。那对于阅读科研文献比较熟练，有一些科研工作经历的人来说，这个笔记的内容可能是文中某个新的实验方法、异于其他研究的实验条件、阅读时自己的新想法等等。精读文献并认真做笔记并不代表读者对于这篇文章的消化过程就此终止，我个人觉得优秀的科研论文、大牛的研究著作依然是常读常新，每位从事科研学习和工作的人在不同的时期都能从中汲取养分。</p><p>经验连接：<a href="https://www.zhihu.com/question/27375221" target="_blank" rel="noopener">https://www.zhihu.com/question/27375221</a><br>如何快速产生科研好想法？<a href="https://zhuanlan.zhihu.com/p/55671526" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/55671526</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何学习</title>
      <link href="/2021/04/24/HowToLearn/"/>
      <url>/2021/04/24/HowToLearn/</url>
      
        <content type="html"><![CDATA[<h2 id="练习英文科技论文常用的短语"><a href="#练习英文科技论文常用的短语" class="headerlink" title="练习英文科技论文常用的短语"></a>练习英文科技论文常用的短语</h2><style>    .input{        width:450px;    }</style><p>例如：<br>在这个方向上：<span><input style="width:450px" id = "input" type="text" name="username"/>  </span><span id="demo"></span></p><p><button id = "mySubmit">提交</button>    <button id = "myClear">清除</button>    <button id = "hint">提示</button></p><script>    document.getElementById("mySubmit").onclick=function(){display()};    document.getElementById("myClear").onclick=function(){clear()};    document.getElementById("hint").onclick=function(){hint()};    function display(){        var content = document.getElementById("input").value;        if (content == "in this direction") {            document.getElementById("demo").innerHTML="You are right";        } else {            document.getElementById("demo").innerHTML="You are wrong, try again";        }            }    function clear() {        document.getElementById("demo").innerHTML="";    }    function hint() {        document.getElementById("demo").innerHTML="in this direction";    }    function func(event){        event.preventDefault();    }    function check(){        console.log("check")    }</script><p>读文章时，读的有感觉了才能发问，发问才能思考，思考才能深入下去。</p>]]></content>
      
      
      <categories>
          
          <category> 示例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>408面试总结</title>
      <link href="/2021/04/22/fushi408/"/>
      <url>/2021/04/22/fushi408/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h4 id="一、线性表对比"><a href="#一、线性表对比" class="headerlink" title="一、线性表对比"></a>一、线性表对比</h4><p>主要关注线性表的一些优缺点和适应性问题。</p><h5 id="1-顺序表"><a href="#1-顺序表" class="headerlink" title="1.顺序表"></a>1.顺序表</h5><p>顺序表不利于插入和删除操作，但是访问元素比较方便（相对于链表而言）。</p><h5 id="2-单链表"><a href="#2-单链表" class="headerlink" title="2.单链表"></a>2.单链表</h5><p>单链表有利于插入和删除操作，但是访问特定的元素时，需要从头开始逐个遍历。</p><h5 id="3-双链表"><a href="#3-双链表" class="headerlink" title="3.双链表"></a>3.双链表</h5><p>双链表使得链表能够方便的访问前驱，当然链表本身就能够访问后继。</p><h5 id="4-循环链表"><a href="#4-循环链表" class="headerlink" title="4.循环链表"></a>4.循环链表</h5><p><strong>循环单链表：</strong></p><ul><li>循环单链表使得从任何一个结点开始都可以遍历整个链表。在直观上有一个环的感觉就可以了</li><li>通常使用带尾结点的循环单链表。它在表头和表尾进行操作的时间复杂度都为O(1)。若不在表尾进行操作，那么也可以使用带头结点的循环单链表。</li></ul><p><strong>循环双链表：（使得循环单链表具有了方便访问前驱的功能）</strong></p><ul><li>对链表的操作更加方便了。只设置一个结点，就可以方便的在表头和表尾进行插入和删除操作。</li></ul><h4 id="二、栈和队列"><a href="#二、栈和队列" class="headerlink" title="二、栈和队列"></a>二、栈和队列</h4><h5 id="1-栈的分类"><a href="#1-栈的分类" class="headerlink" title="1.栈的分类"></a>1.栈的分类</h5><p>顺序栈，链栈，共享栈。对这些结构有个直观上的感觉。</p><h5 id="2-栈的应用"><a href="#2-栈的应用" class="headerlink" title="2.栈的应用"></a>2.栈的应用</h5><p>括号匹配，表达式求值，总之是适用于先进后出的场景。</p><h5 id="3-队列的分类"><a href="#3-队列的分类" class="headerlink" title="3.队列的分类"></a>3.队列的分类</h5><p>循环队列（解决了普通队列假溢出的问题）。链队。双端队列（支持在头尾都进行插入和删除）</p><h5 id="4-队列的应用"><a href="#4-队列的应用" class="headerlink" title="4.队列的应用"></a>4.队列的应用</h5><p>层次遍历，广度优先算法，总之是适用于先进先出的场景。</p><h4 id="三、树"><a href="#三、树" class="headerlink" title="三、树"></a>三、树</h4><h4 id="四、图"><a href="#四、图" class="headerlink" title="四、图"></a>四、图</h4><p>这里主要关注图的存储结构。</p><h5 id="1-邻接矩阵"><a href="#1-邻接矩阵" class="headerlink" title="1.邻接矩阵"></a>1.邻接矩阵</h5><p>对邻接矩阵的直观理解：用一个矩阵来表示图。其中的0表示没有边，1表示有边<br>最大的问题是空间复杂度高，因此它适用于稠密图，不适用于稀疏图<br>另外，这种方法便于删除边，不便于删除顶点。因为删除顶点的话，相当于删除某一行和某一列，这就要涉及到大量的数据的移动。</p><h5 id="2-邻接表"><a href="#2-邻接表" class="headerlink" title="2.邻接表"></a>2.邻接表</h5><p>对邻接表的直观理解：利用边结点和顶点结点对边和顶点进行抽象。顶点结点包括一个指针域，用于链接所有与该顶点相连的边。<br>邻接表改善了邻接矩阵空间复杂度太高的问题，从而，它适用于稠密图和稀疏图。但是它也引入了新的问题。</p><ul><li>当邻接表存储有向图时，不方便求顶点的入度。因为顶点结点链接的都是从该顶点发射出去的边，而不是进入该顶点的边。</li><li>当邻接表存储无向图时，由于一个边连接两个顶点，因此这两个顶点都会链接一个表示该边的边结点。这就造成了信息冗余。一方面，这会浪费存空间。另一方面，在删除顶点和删除边的时候都要考虑删除冗余的那一份信息，这很不方便。</li></ul><h5 id="3-十字链表"><a href="#3-十字链表" class="headerlink" title="3.十字链表"></a>3.十字链表</h5><p>十字链表用于存储有向图，它是对邻接表的改进，因此它保留了邻接表的优点，比如空间复杂度低。<br>理解十字链表最关键的就是理解它的两种结点：边结点和顶点结点。</p><ul><li>边结点：有两个特殊的指针域，一个用于链接与边头相同的边，一个用于链接与边尾相同的边。还有两个特殊的域，一个用于存储边头部顶点编号，一个用于存储边尾部顶点编号。</li><li>顶点结点：有两个特殊的指针域，一个用于链接指向该顶点的边，一个用于链接从该顶点发射出去的边。<br>正是这种抽象机制改善了邻接表不方便求入度的问题。</li></ul><h5 id="4-邻接多重表"><a href="#4-邻接多重表" class="headerlink" title="4.邻接多重表"></a>4.邻接多重表</h5><p>邻接多重表用于存储无向图，它是对邻接表的改进，因此它保留了邻接表的优点，比如空间复杂度低。<br>理解邻接多重表的关键就在于理解它的两种结点：边结点和顶点结点。</p><ul><li>边结点：有两个特殊的指针域，一个用于链接与本边左端所连结点相同的边，另一个用于链接与本边右端所连结点相同的边。还有两个特殊的数据域，分别用于存储本边两端所连顶点的编号。这和十字链表基本是相似的。</li><li>顶点结点：除了数据域外，还有一个特殊的指针域，用于链接与该顶点相连的所有边。<br>这样的机制能够消除冗余的结点，因此解决了邻接表存储无向图存在的问题。</li></ul><h5 id="5-广度优先遍历"><a href="#5-广度优先遍历" class="headerlink" title="5.广度优先遍历"></a>5.广度优先遍历</h5><p>能够用语言把这个算法的过程大致的描述出来。从图的某个顶点开始遍历，先遍历完与它相连的未被遍历过的所有结点，然后再去遍历与这些结点相连的所有未被遍历过的结点，直到所有结点都被遍历完。</p><h5 id="6-深度优先遍历"><a href="#6-深度优先遍历" class="headerlink" title="6.深度优先遍历"></a>6.深度优先遍历</h5><p>能够用语言把这个算法的过程大致的描述出来。从图的某个起始顶点开始遍历，遍历与该顶点相连的未被访问过的任一顶点w，然后再访问与W相邻的任一顶点u，重复这个过程，当不能再向下时，变回到u，再遍历与它相邻的未被访问的其他任一结点，重复这个过程，直到遍历完所有的结点。</p><h4 id="五、查找"><a href="#五、查找" class="headerlink" title="五、查找"></a>五、查找</h4><h5 id="1-顺序查找"><a href="#1-顺序查找" class="headerlink" title="1.顺序查找"></a>1.顺序查找</h5><p>对无序表：从表的开始向表尾逐个元素对比。<br>对有序表：从表的开始向表尾逐个元素对比，直到找到元素，或者找到比目标元素大的值，或者到达表尾则认为是查找失败。</p><h5 id="2-折半查找"><a href="#2-折半查找" class="headerlink" title="2.折半查找"></a>2.折半查找</h5><p>首先要了解，它是一个查找效率很高的一种查找，它要求所有查找的表示有序的。<br>它首先要找到一个中间元素，这个中间元素可以将表划分为较大的部分和较小的部分。将目标元素和这个中间元素进行比较，如果目标元素小于中间元素，则去较小的部分继续做折半查找，否则则去较大的部分继续做折半查找。知道找到元素或者没有元素可以查。<br>只适用于有序顺序表。时间复杂度为对数级。</p><h5 id="3-分块查找"><a href="#3-分块查找" class="headerlink" title="3.分块查找"></a>3.分块查找</h5><p>将查找表分为若干块，块内元素可以无序，但是块与块之间必须是有序的。将每个块中的最大元素提取出来构成一张索引表。块间可以用折半查找，块内可以用顺序查找。</p><h5 id="4-B树和B-树的区别"><a href="#4-B树和B-树的区别" class="headerlink" title="4.B树和B+树的区别"></a>4.B树和B+树的区别</h5><p>关键字与子树的区别：</p><ul><li>B树中，n个关键字的结点含有n+1个子树</li><li>B+树中，n个关键字的结点含有n个子树</li></ul><p>叶结点和非叶结点的区别：</p><ul><li>B树中，叶结点与非叶结点的内容不会重复</li><li>B+树中，叶结点包含所有的关键字，非叶结点只起索引作用</li></ul><h5 id="5-散列查找"><a href="#5-散列查找" class="headerlink" title="5.散列查找"></a>5.散列查找</h5><p>利用散列函数，输入待查找关键字，输出关键字的存储地址。<br>构造散列函数的方法：这里只例举了两个，其他的可以去查书。直接定址法，除留余数法。<br>解决冲突的方法，开放定址法和拉链法。</p><ul><li>开放定址法的核心就是应该偏移多大的数，根据其偏移的数的不同划分了以下几种。<ul><li>线性探测：冲突地址加上一个线性序列中的元素，直到没有冲突</li><li>平方探测：冲突地址偏移一个平方数</li><li>再散列法：冲突地址加的偏移量是经过一个散列函数计算出来的</li></ul></li><li>拉链法：将地址冲突的关键字拉成一个链。</li></ul><h4 id="六、排序"><a href="#六、排序" class="headerlink" title="六、排序"></a>六、排序</h4>]]></content>
      
      
      <categories>
          
          <category> 复试408 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复试408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StringAlg</title>
      <link href="/2021/03/28/StringAlg/"/>
      <url>/2021/03/28/StringAlg/</url>
      
        <content type="html"><![CDATA[<h4 id="字符串左移"><a href="#字符串左移" class="headerlink" title="字符串左移"></a>字符串左移</h4><p><strong>输入：</strong>字符串String以及左移多少个字符k<br><strong>输出：</strong>左移后的字符串String<br><strong>例如：</strong>String=”abcdef”，k=2。那么我们期待的输出为”cdefab”<br><strong>思路：</strong>核心数学思想：$(x^{-1}y^{-1})^{-1}$。对于一个字符串xy，这里的x和y并不仅仅是指两个字符而是代表字符串的两个部分，因此这里也体现了抽象的方法。对于字符串xy经过上面的公式可以得到yx，这就是解答这个题的核心数学思想。令x代表ab，令y代表cdef，这样就转到了这个题目。到这一步，就只剩下写代码了。可以看出来，这里的核心数学操作只有一个那就是取逆。因此，代码的核心部分应该就是reverse函数。我是用Java写的，Java的字符串类型是不可变的，因此处理的时候，将字符串转换成了char数组。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 翻转字符串。比如，要翻转1234中的12，那么from是0，to是1     * @param chs 将字符串转换成的数组     * @param from 翻转的起始索引     * @param to 转换的终止索引     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>from <span class="token operator">&lt;</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> chs<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">;</span>            chs<span class="token punctuation">[</span>from<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> chs<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">;</span>            chs<span class="token punctuation">[</span>to<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串的全排列"><a href="#字符串的全排列" class="headerlink" title="字符串的全排列"></a>字符串的全排列</h4><p><strong>输入：</strong>字符串String<br><strong>输出：</strong>该字符串全排列的所有情况<br><strong>例如：</strong>String=”123”。那么我们期待的输出为：123,132,213,231,312,321。顺序可以不同<br><strong>思路：</strong>将字符串全排列问题认为是一个全排列问题，我想大家应该不会有意见。全排列问题是一个大概念，字符串的全排列是它的一个子集。如果将字符串中的字符认为是一种抽象的表示的话，那么我们可以衍生出其他的同类问题。比如：将字符认为是对对象的抽象，那么我们可以得到对象的全排列问题；将字符认为是对结点的抽象，那么我们可以得到对结点的全排列问题。要解决全排列问题，可能要强迫自己接受一个事实，那就是全排列问题可以是一个递归问题。这是用递归算法求解全排列问题的出发点，认清问题的类型，才能够选择合适的方法。我目前还没有深刻的理解全排列问题可以是一个递归问题这个事实，但是我已经让我自己接受了这个事实，我还需要花点时间慢慢的理解它。如果你很难接受这个知识点的话，那么可以观察一下全排列的数学公式。它是阶乘的形式，阶乘是递归的。这个现象可以带给我们一种递归的感觉，让我们先感觉到全排列有点递归的意思，辅助我们接收这个知识点。至于深刻理解这个问题，恐怕还要费点时间。总之，递归的观点是解决全排列问题的一个出发点。把一个四个字符的字符串1234进行全排列，让1分别和后面的三个字符进行交换以表示第一个位置上可以取得的所有情况，然后保持第一个位置不变，对后面的三个字符进行全排列，这样的三个字符的全排列仍然是相同的情况，只不过规模更小了，那么我们只需要做相同的操作，让第一个字符分别和后面的两个字符进行交换以表示第一个位置上可以取得的所有情况，然后保持第一个位置不变，对后面的两个字符进行全排列…这样下去，将会到达一种平凡的情况，对一个字符进行全排列，这时候只需要做简单打印字符串的操作就可以了。下面是代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Permutation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 由于字符串是不可变的，所以将它转换成字符数组进行处理</span>    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Permutation</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chs <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/** 递归函数 */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">permutate</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当from=to的时候，表示从这个字符开始到这个字符结束，进行全排列</span>        <span class="token comment" spellcheck="true">// 即对单个字符进行全排列，这就是终止条件，递归进入了一种平凡的</span>        <span class="token comment" spellcheck="true">// 情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">==</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果不是平凡的情况，那么就交换字符，然后对除第一个字符之外的</span>        <span class="token comment" spellcheck="true">// 后面的字符进行全排列(from+1)体现了这一点。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> from<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> to<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// from表示本次要进行全排列的字符串的第一个字符的索引。for</span>            <span class="token comment" spellcheck="true">// 循环表示，从这个子串的第一个字符开始，分别同第一个字符</span>            <span class="token comment" spellcheck="true">// 进行交换，然后对更小的字串进行全排列。完成之后，再交换</span>            <span class="token comment" spellcheck="true">// 回来。之所以要交换回来，是因为from位置上的字符要和其后</span>            <span class="token comment" spellcheck="true">// 面的字串上的每个字符进行交换，你换了一次但不换回来，那</span>            <span class="token comment" spellcheck="true">// 到下一次你去哪找from上的字符。</span>            <span class="token function">swap</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">permutate</span><span class="token punctuation">(</span>from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/** 交换i位置和j位置上的字符 */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> temp <span class="token operator">=</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> chs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        chs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/** 暴露给用户的方法调用 */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">permutate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="带重复字符的字符串的全排列"><a href="#带重复字符的字符串的全排列" class="headerlink" title="带重复字符的字符串的全排列"></a>带重复字符的字符串的全排列</h4><p><strong>输入：</strong>字符串String，其中可以有重复字符，可以没有重复字符，但是算法会考虑到重复字符的问题<br><strong>输出：</strong>该字符串全排列的所有情况，并且会考虑重复字符的情况<br><strong>例如：</strong>String=”122”。那么我们期待的输出为：122,212,221。顺序可以不同<br><strong>思路：</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理想的计算机科学知识体系</title>
      <link href="/2021/03/10/CSKnowledgeSys/"/>
      <url>/2021/03/10/CSKnowledgeSys/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.penglixun.com/study/computer_science_knowledge_hierarchy.html" target="_blank" rel="noopener">文章出处：http://www.penglixun.com/study/computer_science_knowledge_hierarchy.html</a></p><h4 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h4><ul><li>数学理论（书籍：《具体数学》《离散数学》《数理逻辑》）<ul><li>基础数学</li><li>高等数学（极限理论）</li><li>数论(Number Theory)</li><li>离散数学（集合论、图论）</li><li>数理逻辑</li></ul></li><li>形式语言与自动机（Automata，书籍：《形式语言与自动机》）</li><li>几何理论（Geometry）</li></ul><h4 id="硬件（书籍：《Computer-Architecture-A-Quantitative-Approach》）"><a href="#硬件（书籍：《Computer-Architecture-A-Quantitative-Approach》）" class="headerlink" title="硬件（书籍：《Computer Architecture: A Quantitative Approach》）"></a>硬件（书籍：《Computer Architecture: A Quantitative Approach》）</h4><ul><li>计算机组成原理：计算机组成部件、CPU时间片、存储体系、IO接口、总线技术</li><li>计算机体系结构：多处理机、流水技术、指令调度</li><li>计算机微机原理：一种处理机的具体结构、引脚作用</li><li>数字电路：逻辑门电路、触发器、组合电路设计</li></ul><h4 id="机器语言编程"><a href="#机器语言编程" class="headerlink" title="机器语言编程"></a>机器语言编程</h4><ul><li>汇编程序设计（Assembly）</li><li>可执行文件格式</li><li>链接(Linking)与加载(Loading)</li></ul><h4 id="操作系统（书籍：《现代操作系统》《操作系统实现》）"><a href="#操作系统（书籍：《现代操作系统》《操作系统实现》）" class="headerlink" title="操作系统（书籍：《现代操作系统》《操作系统实现》）"></a>操作系统（书籍：《现代操作系统》《操作系统实现》）</h4><ul><li>进程与线程理论</li><li>段页式内存管理</li><li>文件系统</li><li>IO管理</li><li>内核与驱动</li></ul><h4 id="程序设计基础（书籍：《The-Art-of-Computer-Programming》）"><a href="#程序设计基础（书籍：《The-Art-of-Computer-Programming》）" class="headerlink" title="程序设计基础（书籍：《The Art of Computer Programming》）"></a>程序设计基础（书籍：《The Art of Computer Programming》）</h4><ul><li>数据结构（书籍：《数据结构与算法分析》）</li><li>算法<ul><li>算法分析（书籍：《算法分析》）</li><li>算法设计（书籍：《算法导论》）</li></ul></li></ul><h4 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h4><ul><li>编译原理（《编译原理》龙书）</li><li>C一定要会</li><li>C++/Java建议要会（《C++ Primer》《Effective C++》《Thinking in Java》）</li><li>Python/Perl/Shell等脚本语言掌握其一</li></ul><h4 id="编程框架和库"><a href="#编程框架和库" class="headerlink" title="编程框架和库"></a>编程框架和库</h4><ul><li>平台程序开发<ul><li>Windows程序设计（书籍：《Programming Windows》）</li><li>Linux/Unix系统编程（书籍：《Advanced Programming in the UNIX Environment》）</li><li>跨平台程序设计</li></ul></li></ul><h4 id="程序设计与软件工程"><a href="#程序设计与软件工程" class="headerlink" title="程序设计与软件工程"></a>程序设计与软件工程</h4><ul><li>面向对象的程序设计方法，必须掌握（书籍：《深入浅出设计模式》《Thinking in UML》《The Unified Modeling Language User Guide》）</li><li>敏捷（Agile）、统一过程（RUP）、迭代方法（Iterative）建议掌握一些</li><li>调试和测试方法必须掌握一些</li></ul><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li>计算机网络（书籍：《计算机网络》）</li><li>数据库（书籍：《数据库系统概念》《数据库系统实现》）</li><li>WEB应用</li><li>并行开发（Concurrent Programming）</li><li>分布式系统（Distributed System）</li></ul><h4 id="学习指导参考"><a href="#学习指导参考" class="headerlink" title="学习指导参考"></a>学习指导参考</h4><p><a href="https://github.com/ossu/computer-science" target="_blank" rel="noopener">开源社会大学</a>：免费自学计算机科学教育之路<br><a href="https://github.com/keithnull/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md" target="_blank" rel="noopener">自学计算机科学</a>：如果你是一个自学成才的工程师，或者从编程培训班毕业，那么你很有必要学习计算机科学。幸运的是，不必为此花上数年光阴和不菲费用去攻读一个学位：仅仅依靠自己，你就可以获得世界一流水平的教育</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习记录一</title>
      <link href="/2021/03/07/MyBatisLean1/"/>
      <url>/2021/03/07/MyBatisLean1/</url>
      
        <content type="html"><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>理解MyBatis运行原理</li><li>掌握MyBatis的基本使用</li><li>掌握MyBatis的占位符与拼接符</li><li>理解MyBatis原始Dao的开发方式</li><li>掌握MyBatis的高级Mapper代理</li><li>掌握SqlMapConfig全局优化配置</li><li>掌握MyBatis动态SQL</li><li>掌握MyBatis 高级映射</li><li>掌握一对一、一对多、多对多关联拆线呢</li><li>掌握MyBatis查询缓存</li><li>掌握MyBatis整合Ehcache框架</li><li>掌握MyBatis自动化工程</li></ul><h2 id="MyBaits的运行原理"><a href="#MyBaits的运行原理" class="headerlink" title="MyBaits的运行原理"></a>MyBaits的运行原理</h2><h2 id="Mybatis的占位符与拼接符"><a href="#Mybatis的占位符与拼接符" class="headerlink" title="Mybatis的占位符与拼接符"></a>Mybatis的占位符与拼接符</h2><p><code>#{}</code>是Mybatis的占位符，在传参时在参数值外面添加一对单引号。</p><pre class="line-numbers language-SQL"><code class="language-SQL">select * from user where cname=#{value}转换后select * from user where cname='zhangsan'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>${}</code>符号是MyBatis 的拼接符，对传入的参数不做任何修饰，直接进行简单的字符串拼接。</p><pre class="line-numbers language-SQL"><code class="language-SQL">select * from user where cname=${value}转换后select * from user where cname=zhangsan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="MyBatis原始Dao的开发方式"><a href="#MyBatis原始Dao的开发方式" class="headerlink" title="MyBatis原始Dao的开发方式"></a>MyBatis原始Dao的开发方式</h2><h2 id="MyBatis的高级Mapper代理"><a href="#MyBatis的高级Mapper代理" class="headerlink" title="MyBatis的高级Mapper代理"></a>MyBatis的高级Mapper代理</h2><p>原始Dao的开发方式在创建Dao接口的之后还要定义其实现类。使用MyBatis高级Mapper代理的方式，只需要定义接口即可，不用再为接口提供实现类。但要编写mapper.xml配置文件。而且mapper.xml配置文件和接口的定义需要遵循一定的开发规范：</p><ul><li>为了体现高级Mapper代理的方式，可以将接口名使用Mapper进行结尾（例如：UserMapper）。并将mapper.xml文件的namespace命名空间指定为Mapper接口的地址。（例如：<code>&lt;mapper namespace=&quot;com.andrewguan.user.dao.UserMapper&quot;&gt;</code>）</li><li>Mapper 接口中的方法名要与配置文件mapper.xml 中的Statement 对象的id 一致。</li><li>mapper 接口中方法的输入参数要与mapper.xml 配置文件中的parameterType 保持一致。</li><li>mapper 接口中方法的返回值类型要与mapper.xml 配置文件中的resultType 保持一致。<br>这样我们可以通过<code>sqlSession.getMapper(xxxMapper.class)</code>的反射方式拿到Mapper，然后利用拿到的Mapper进行增删改查操作。</li></ul><h2 id="SqlMapConfig全局优化配置"><a href="#SqlMapConfig全局优化配置" class="headerlink" title="SqlMapConfig全局优化配置"></a>SqlMapConfig全局优化配置</h2><p>sqlMapConfig.xml的校验文档中给出的属性出现的次序：<code>configuration(properties?, settings?, typeAliases?, typeHandlers?, objectFactory?,objectWrapperFactory?,reflectorFactory?, plugins?, environments?, databaseIdProvider?, mappers?)</code><br>下面是sqlMapConfig.xml配置文件的内容：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- MyBatis的全局参数设置，基本用来进行MyBatis的优化处理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 以下配置不需掌握，和Spring整合后，以下配置将被废除 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysqlenv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysqlenv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!-- Change the name of database --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span>                          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>false&amp;amp;serverTimezone<span class="token punctuation">=</span>Hongkong<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!-- Change the value of the username --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!-- Change the value of the password --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述xml文件中属性的解释：</p><ol><li>transactionManager 元素用于配置事务管理。type指定它的类型为jdbc</li><li>dataSource 元素用于配置数据源，type 属性用于指定数据源类型，值为pooled 表示数据库连接池。</li><li>property 元素用于配置数据库连接池的属性信息，以硬编码的形式配置在文件中。</li></ol><h4 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h4><p>settings 元素用于配置MyBatis 框架运行时的一些性能调优的参数设定。如果参数配置不当反而会影响整个框架的运行，所以配置时要严格按照给定的参数进行配置。例如：开启二级缓存、开启延迟加载等。<br>|  setting   | Description 描述  |  验证值   | 默认值 |<br>|  —-  | —-  | —-  | —-  |<br>| cacheEnabled | 在全局范围内启用或禁用缓存配置任何映射器在此配置下。 | true/false |  true|<br>| lazyLoadingEnabled | 在全局范围内启用或禁用延迟加载。禁用时，所有协议的数据将会热加载。 | true/false  | true |<br>| aggressiveLazyLoading  | 启用时，有延迟加载属性的对象将被完全加载后调用懒惰的任何属性。否则，每一个属性是按需加载  | truefalse  | true  |<br>|  multipleResultSetsEnabled  | 允许或不允许从一个单独的语句（需要兼容的驱动程序）要返回多个结果集。  | true/false  | true  |<br>|  useColumnLabel  | 使用列标签，而不是列名。在这方面，不同的驱动有不同的行为。参考驱动文档或测试两种方法来决定你的驱动程序的行为如何。  | true/false  | true  |<br>|  useGeneratedKeys  | 允许JDBC 支持生成的密钥。兼容的驱动程序是必需的。此设置强制生成的键被使用，如果设置为true，一些驱动会不兼容性，但仍然可以工作。  | true/false  | true  |<br>|  autoMappingBehavior  | 指定MyBatis 的应如何自动映射列到字段/属性。NONE自动映射。PARTIAL 只会自动映射结果没有嵌套结果映射定义里面。FULL 会自动映射的结果映射任何复杂的（包含嵌套或其他）。  | none/partial/full  | partial  |<br>|  defaultExecutorType  | 配置默认执行人。SIMPLE 执行人确实没有什么特别的。REUSE 执行器重用准备好的语句。BATCH 执行器重用语句和批处理更新。  | simple/reuse/batch  | simple  |<br>|  defaultStatementTimeout  | 设置驱动程序等待一个数据库响应的秒数。  | Any positive integer  | not set  |<br>|  safeRowBoundsEnabled  | 允许使用嵌套的语句RowBounds。  | true/false  | false  |<br>|  localCacheScope  | MyBatis 的使用本地缓存，以防止循环引用，并加快反复嵌套查询。默认情况下（SESSION）会话期间执行的所有查询缓存。如果localCacheScope=STATMENT本地会话将被用于语句的执行，只是没有将数据共享之间的两个不同的调用相同的SqlSession。  | session/statement  | session  |<br>|  dbcTypeForNull  | 指定为空值时，没有特定的JDBC 类型的参数的JDBC类型。有些驱动需要指定列的JDBC 类型，但其他像NULL，VARCHAR 或OTHER 的工作与通用值。  | JdbcType enumeration.Most common are: NULL, VARCHAR and OTHER  | oter  |<br>|  lazyLoadTriggerMethods  | 指定触发延迟加载的对象的方法  | A method name list separated by commas  | equals,clone,hashCode,toString  |<br>|  defaultScriptingLanguage  | 指定所使用的语言默认为动态SQL生成。  | A type alias or fully qualified class name.  | org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver  |<br>|  callSettersOnNulls | 指定如果setter 方法 或地图的put 方法时，将调用检索到的值是null 。它是有用的， 当你依靠Map.keySet（）或null 初始化。注意原语（如整型,布尔等）不会被设置为null。  | true/false  | false  |<br>|  logPrefix  | 指定的前缀字串，MyBatis 将会增加记录器的名称。  | Any String  | not set  |<br>| logImpl | 指定MyBatis 的日志实现使用。如果此设置是不存在的记录的实施,将自动查找。| SLF4J/LOG4J… | not set |<br>|  proxyFactory  | 指定代理工具，MyBatis 将会使用创建懒加载能力的对象。  | cglib  | javassist  |</p><h4 id="typeAliases-别名"><a href="#typeAliases-别名" class="headerlink" title="typeAliases 别名"></a>typeAliases 别名</h4><p>类型别名是为Java 的全限定名起一个短小的名称。它只和XML 配置有关，只用来减少全限定类型的多于部分，<br>便于开发。<br>在全局配置文件中使用<typeAliases>标签进行别名配置，typeAliases 提供了两种方式的别名定义：<br><strong>1. 单个别名定义</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.andrewguan.user.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.andrewguan.role.pojo.Role<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的意思为type指定的类型起别名，在mapper.xml的文件中指定parameterType或resultType时可以使用别名，从而简化了代码。</p><p><strong>2. 批量别名定义</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.andrewguan.user.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为这个包下的所有的类起别名，别名就是类名，大小写都可以。</p><p><strong>Mybatis内置的别名</strong><br>值得一提的是，简单类型的别名前面有一个下划线<br>| 别名 | 映射类型 | 别名 | 映射类型 | 别名 | 映射类型 |<br>| —- |  —— | —- | ——- | —- |  ——- |<br>| _byte | byte | _long | long | _short | short |<br>| _int | int | _integer | int | _boolean | boolean |<br>| _float | float | short | Short | string | String |<br>| byte | Byte | _long | long | int | Integer |<br>| integer | Integer | float | Float | double | Double |<br>| boolean | Boolean | decimal | BigDecimal | bigdecimal | BigDecimal |<br>| object | Object | map | Map | hashMap | HashMap |<br>| list | List | arrayList | ArrayList | collection | Collection |<br>| iterator | Iterator |   |   |   |   |  </p><p>在Idea中创建Maven项目<br>MyBatisPom.xml的配置</p><p>MyBatis的配置：<br><a href="https://mvnrepository.com/artifact/org.mybatis/mybatis" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.mybatis/mybatis</a><br><a href="https://mvnrepository.com/artifact/log4j/log4j" target="_blank" rel="noopener">https://mvnrepository.com/artifact/log4j/log4j</a><br><a href="https://mvnrepository.com/artifact/commons-logging/commons-logging" target="_blank" rel="noopener">https://mvnrepository.com/artifact/commons-logging/commons-logging</a><br><a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java" target="_blank" rel="noopener">https://mvnrepository.com/artifact/mysql/mysql-connector-java</a><br><a href="https://mvnrepository.com/artifact/junit/junit" target="_blank" rel="noopener">https://mvnrepository.com/artifact/junit/junit</a></p><p>创建JavaBean与数据库表相对应。<br>一个全局配置文件和n个mapper<br>Mapper的命名格式（TableName+Mapper），例如：workerMapper</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLZoo答案</title>
      <link href="/2021/02/23/SQLZoo/"/>
      <url>/2021/02/23/SQLZoo/</url>
      
        <content type="html"><![CDATA[<h2 id="1-SELECT-name"><a href="#1-SELECT-name" class="headerlink" title="1 SELECT name"></a>1 SELECT name</h2><p><strong>Some pattern matching queries</strong></p><ol><li>Find the country that start with Y<pre class="line-numbers language-SQl"><code class="language-SQl">SELECT name FROM world WHERE name LIKE 'F%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Find the countries that end with y<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name FROM world WHERE name LIKE '%y'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Find the countries that contain the letter x<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name FROM world WHERE name LIKE '%x%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Find the countries that end with land<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name FROM worldWHERE name LIKE '%land'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Find the countries that start with C and end with ia<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name FROM worldWHERE name LIKE 'C%ia'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Find the country that has oo in the name<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name FROM worldWHERE name LIKE '%oo%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Find the countries that have three or more a in the name<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name FROM world WHERE name LIKE '%a%a%a%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Find the countries that have “t” as the second character.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name FROM worldWHERE name LIKE '_t%'ORDER BY name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Find the countries that have two “o” characters separated by two others.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name FROM worldWHERE name LIKE '%o__o%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Find the countries that have exactly four characters.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name FROM worldWHERE name LIKE '____'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Find the country where the name is the capital city.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM worldWHERE name = capital;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Find the country where the capital is the country plus “City”.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM worldWHERE capital = concat(name, ' City');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Find the capital and the name where the capital includes the name of the country.<pre class="line-numbers language-SQL"><code class="language-SQL">select capital,namefrom worldwhere capital like '%' + name + '%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Find the capital and the name where the capital is an extension of name of the country.<pre class="line-numbers language-SQL"><code class="language-SQL">select capital,namefrom worldwhere capital like name + '_%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="2-SELECT-from-WORLD-Tutorial"><a href="#2-SELECT-from-WORLD-Tutorial" class="headerlink" title="2 SELECT from WORLD Tutorial"></a>2 SELECT from WORLD Tutorial</h2><p><strong>use the SELECT command on the table world</strong></p><ol><li>show the name, continent and population of all countries.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, continent, population FROM world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>Show the name for the countries that have a population of at least 200 million. 200 million is 200000000, there are eight zeros.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM worldWHERE population > 200000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Give the name and the per capita GDP for those countries with a population of at least 200 million.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, gdp/populationFROM worldWHERE population > 200000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show the name and population in millions for the countries of the continent ‘South America’. Divide the population by 1000000 to get population in millions.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, population/1000000 'population / millions'FROM worldWHERE continent = 'South America'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show the name and population for France, Germany, Italy<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, populationFROM worldWHERE name in ('France', 'Germany', 'Italy')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show the countries which have a name that includes the word ‘United’<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM worldWHERE name like '%United%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show the countries that are big by area or big by population. Show name, population and area.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, population, areaFROM worldWHERE area > 3000000 or population > 250000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Exclusive OR (XOR). Show the countries that are big by area (more than 3 million) or big by population (more than 250 million) but not both. Show name, population and area.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, population, areaFROM worldWHERE  (area > 3000000 and population <= 250000000) or (area < 3000000 and population > 250000000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>For South America show population in millions and GDP in billions both to 2 decimal places.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, round(population/1000000, 2), round(gdp/1000000000, 2)FROM worldWHERE continent = 'South America'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show per-capita GDP for the trillion dollar countries to the nearest $1000.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, round(gdp/population, -3)FROM worldWHERE gdp > 1000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show the name and capital where the name and the capital have the same number of characters.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, capitalFROM worldWHERE len(name) = len(capital)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show the name and the capital where the first letters of each match. Don’t include countries where the name and the capital are the same word.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, capitalFROM worldWHERE name <> capital and left(name, 1) = left(capital, 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Find the country that has all the vowels and no spaces in its name.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM worldWHERE name LIKE '%a%' andname LIKE '%o%' andname LIKE '%e%' andname LIKE '%i%' andname LIKE '%u%' andname NOT LIKE '% %'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-SELECT-from-Nobel-Tutorial"><a href="#3-SELECT-from-Nobel-Tutorial" class="headerlink" title="3 SELECT from Nobel Tutorial"></a>3 SELECT from Nobel Tutorial</h2><p><strong>We continue practicing simple SQL queries on a single table.</strong></p><ol><li>Change the query shown so that it displays Nobel prizes for 1950.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT yr, subject, winnerFROM nobelWHERE yr = 1950<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show who won the 1962 prize for Literature.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT winnerFROM nobelWHERE yr = 1962AND subject = 'Literature'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>Show the year and subject that won ‘Albert Einstein’ his prize.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT yr, subjectFROM nobelWHERE winner = 'Albert Einstein'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Give the name of the ‘Peace’ winners since the year 2000, including 2000.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT winnerFROM nobelWHERE yr >= 2000 and subject = 'Peace'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show all details (yr, subject, winner) of the Literature prize winners for 1980 to 1989 inclusive.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT yr, subject, winnerFROM nobelWHERE subject = 'Literature' AND yr BETWEEN 1980 AND 1989<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show all details of the presidential winners:(Theodore Roosevelt,Woodrow Wilson,Jimmy Carter,Barack Obama)<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT * FROM nobelWHERE winner  IN ('Theodore Roosevelt', 'Woodrow Wilson', 'Jimmy Carter', 'Barack Obama')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show the winners with first name John<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT winnerFROM nobelWHERE winner LIKE 'John %'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show the year, subject, and name of Physics winners for 1980 together with the Chemistry winners for 1984.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT yr, subject,winnerFROM nobelWHERE (yr = 1980 AND subject = 'Physics')or (yr = 1984 AND subject = 'Chemistry')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>Show the year, subject, and name of winners for 1980 excluding Chemistry and Medicine<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT yr, subject, winnerFROM nobelWHERE yr = 1980 AND subject NOT IN ('Chemistry', 'Medicine')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show year, subject, and name of people who won a ‘Medicine’ prize in an early year (before 1910, not including 1910) together with winners of a ‘Literature’ prize in a later year (after 2004, including 2004)<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT yr, subject, winnerFROM nobelWHERE (subject = 'Medicine' AND yr < 1910) OR  (subject = 'Literature' AND yr >= 2004)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>Find all details of the prize won by PETER GRÜNBERG.(There contains an Non-ASCII characters)<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT *FROM nobelWHERE winner = 'PETER GRÜNBERG'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Find all details of the prize won by EUGENE O’NEILL.(There contains an single qutoes)<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT *FROM nobelWHERE winner = 'EUGENE O''NEILL'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>List the winners, year and subject where the winner starts with Sir. Show the the most recent first, then by name order.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT winner, yr, subjectFROM nobelWHERE winner LIKE 'Sir_%'ORDER BY yr DESC, winner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>The expression subject IN (‘Chemistry’,’Physics’) can be used as a value - it will be 0 or 1. Show the 1984 winners and subject ordered by subject and winner name; but list Chemistry and Physics last.<br><code>...</code></li></ol><h2 id="4-SELECT-within-SELECT-Tutorial"><a href="#4-SELECT-within-SELECT-Tutorial" class="headerlink" title="4 SELECT within SELECT Tutorial"></a>4 SELECT within SELECT Tutorial</h2><p>Looks at how we can use SELECT statements within SELECT statements to perform more complex queries.</p><ol><li>List each country name where the population is larger than that of ‘Russia’.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM worldWHERE population >  (SELECT population FROM world   WHERE name='Russia')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Show the countries in Europe with a per capita GDP greater than ‘United Kingdom’.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM worldWHERE gdp/population >  (SELECT gdp/population    FROM world   WHERE name = 'United Kingdom') AND continent = 'Europe'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>List the name and continent of countries in the continents containing either Argentina or Australia. Order by name of the country.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, continentFROM worldWHERE continent in  (SELECT continent    FROM world   WHERE name IN ('Argentina', 'Australia'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Which country has a population that is more than Canada but less than Poland? Show the name and the population.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, populationFROM world WHERE population >   (SELECT population   FROM world   WHERE name='Canada')   And population <  (SELECT population   FROM world   WHERE name='Poland')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Show the name and the population of each country in Europe. Show the population as a percentage of the population of Germany.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name,    CONCAT(ROUND(100*population/(SELECT population FROM world WHERE name='Germany'), 0),'%') 'percentage' FROM world WHERE continent='Europe' <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>Which countries have a GDP greater than every country in Europe? [Give the name only.] (Some countries may have NULL gdp values)<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM worldWHERE gdp > ALL(SELECT gdp FROM world WHERE continent='Europe' and gdp > 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Find the largest country (by area) in each continent, show the continent, the name and the area:<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT continent, name, area FROM world xWHERE area >= ALL(SELECT area FROM world y                 WHERE y.continent=x.continent AND area > 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>List each continent and the name of the country that comes first alphabetically.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT continent,     nameFROM world xWHERE name <= ALL(SELECT name               FROM world y               WHERE y.continent = x.continent)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Find the continents where all countries have a population &lt;= 25000000. Then find the names of the countries associated with these continents. Show name, continent and population.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, continent, populationFROM world xWHERE 25000000 >= ALL(SELECT population                   FROM world y                   WHERE x.continent = y.continent)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Some countries have populations more than three times that of any of their neighbours (in the same continent). Give the countries and continents.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, continentFROM world xWHERE population >= ALL(SELECT 3*population                         FROM world y                        WHERE x.continent = y.continent AND population > 0                        AND y.name != x.name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="5-SUM-and-COUNT"><a href="#5-SUM-and-COUNT" class="headerlink" title="5. SUM and COUNT"></a>5. SUM and COUNT</h2><p><strong>This tutorial is about aggregate functions such as COUNT, SUM and AVG. An aggregate function takes many values and delivers just one value. For example the function SUM would aggregate the values 2, 4 and 5 to deliver the single value 11.</strong><br><strong>The difference of the ‘HAVING’ and ‘WHERE’: The HAVING clause is tested after the GROUP BY. The WHERE filter takes place before the aggregating function.</strong></p><ol><li>Show the total population of the world.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT SUM(population)FROM world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>List all the continents - just once each.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT DISTINCT(continent)FROM world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Give the total GDP of Africa<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT SUM(gdp)FROM worldWHERE continent = 'Africa'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>How many countries have an area of at least 1000000<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT COUNT(name)FROM worldWHERE area>=1000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>What is the total population of (‘Estonia’, ‘Latvia’, ‘Lithuania’)<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT SUM(population)FROM worldWHERE name in ('Estonia', 'Latvia', 'Lithuania')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>For each continent show the continent and number of countries.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT continent, COUNT(name) 'number of countries'FROM worldGROUP BY continent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>For each continent show the continent and number of countries with populations of at least 10 million.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT continent, COUNT(name)FROM worldWHERE population >= 10000000GROUP BY continent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>List the continents that have a total population of at least 100 million.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT continentFROM worldGROUP BY continentHAVING SUM(population) >= 100000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="5-The-JOIN-operation"><a href="#5-The-JOIN-operation" class="headerlink" title="5. The JOIN operation"></a>5. The JOIN operation</h2><p><strong>This tutorial introduces JOIN which allows you to use data from two or more tables. The tables contain all matches and goals from UEFA EURO 2012 Football Championship in Poland and Ukraine.</strong></p><ol><li>Modify it to show the matchid and player name for all goals scored by Germany. To identify German players, check for: teamid = ‘GER’<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT matchid, playerFROM goalWHERE teamid='GER'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show id, stadium, team1, team2 for just game 1012<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT id,stadium,team1,team2FROM gameWHERE id = '1012'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Modify it to show the player, teamid, stadium and mdate for every German goal.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT player,teamid,stadium,mdateFROM game JOIN goal ON (id=matchid)WHERE teamid='GER'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show the team1, team2 and player for every goal scored by a player called Mario player LIKE ‘Mario%’<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT team1, team2, playerFROM game JOIN goal ON (id = matchid)WHERE player LIKE 'Mario%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show player, teamid, coach, gtime for all goals scored in the first 10 minutes gtime&lt;=10<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT player, teamid, coach,gtimeFROM goal JOIN eteam on (teamid=id)WHERE gtime<=10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>List the dates of the matches and the name of the team in which ‘Fernando Santos’ was the team1 coach.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT mdate, teamnameFROM game JOIN eteam ON (team1=eteam.id)WHERE coach = 'Fernando Santos'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>List the player for every goal scored in a game where the stadium was ‘National Stadium, Warsaw’<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT playerFROM game JOIN goal ON (id = matchid)WHERE stadium = 'National Stadium, Warsaw'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Instead show the name of all players who scored a goal against Germany.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT DISTINCT(player)FROM game JOIN goal ON matchid = id  WHERE ((team1='GER' OR team2='GER') AND teamid != 'GER')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show teamname and the total number of goals scored.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT teamname, COUNT(player)FROM eteam JOIN goal ON id=teamidGROUP BY teamname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Show the stadium and the number of goals scored in each stadium.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT stadium, COUNT(player)FROM game JOIN goal ON(id=matchid)GROUP BY stadium<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>For every match involving ‘POL’, show the matchid, date and the number of goals scored.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT matchid, mdate, COUNT(player)FROM game JOIN goal ON (matchid = id) WHERE (team1 = 'POL' OR team2 = 'POL')GROUP BY matchid, mdate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>For every match where ‘GER’ scored, show matchid, match date and the number of goals scored by ‘GER’<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT matchid, mdate,COUNT(player)FROM game JOIN goal on(id=matchid)WHERE teamid='GER'GROUP BY matchid, mdate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-SQL"><code class="language-SQL">SELECT mdate,team1,SUM(CASE WHEN teamid=team1 THEN 1 ELSE 0 END) score1,team2,SUM(CASE WHEN teamid=team2 THEN 1 ELSE 0 END) score2FROM game LEFT JOIN goal ON (matchid = id)GROUP BY mdate, matchid, team1,team2ORDER BY mdate, matchid, team1, team2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="7-More-JOIN-operations"><a href="#7-More-JOIN-operations" class="headerlink" title="7. More JOIN operations"></a>7. More JOIN operations</h2><p><strong>This tutorial introduces the notion of a join. The database consists of three tables movie , actor and casting .</strong></p><ol><li>List the films where the yr is 1962 [Show id, title]<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT id, titleFROM movieWHERE yr=1962<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Give year of ‘Citizen Kane’.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT yrFROM movieWHERE title = 'Citizen Kane'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>List all of the Star Trek movies, include the id, title and yr (all of these movies include the words Star Trek in the title). Order results by year.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT id, title, yrFROM movieWHERE title LIKE '%Star Trek%'ORDER BY yr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>What id number does the actor ‘Glenn Close’ have?<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT idFROM actorWHERE name = 'Glenn Close'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>What is the id of the film ‘Casablanca’<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT idFROM movieWHERE title = 'Casablanca'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Obtain the cast list for ‘Casablanca’.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM movie JOIN casting ON (movie.id = movieid)        JOIN actor ON (actor.id = actorid)WHERE title = 'Casablanca'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>Obtain the cast list for the film ‘Alien’<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM movie JOIN casting ON (movie.id = movieid)        JOIN actor ON (actorid = actor.id)WHERE title = 'Alien'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>List the films in which ‘Harrison Ford’ has appeared<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT titleFROM movie JOIN casting ON (movie.id = movieid)        JOIN actor ON (actorid = actor.id)WHERE name = 'Harrison Ford'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>List the films where ‘Harrison Ford’ has appeared - but not in the starring role. [Note: the ord field of casting gives the position of the actor. If ord=1 then this actor is in the starring role]<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT titleFROM movie JOIN casting ON (movie.id = movieid)        JOIN actor ON (actorid = actor.id)WHERE name = 'Harrison Ford' AND ord != 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>List the films together with the leading star for all 1962 films.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT title, nameFROM movie JOIN casting ON (movie.id = movieid)       JOIN actor ON (actor.id = actorid)WHERE yr = 1962 AND ord = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>Which were the busiest years for ‘Rock Hudson’, show the year and the number of movies he made each year for any year in which he made more than 2 movies.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT yr, COUNT(title) FROM movie JOIN casting ON movie.id=movieid       JOIN actor   ON actorid=actor.idWHERE name='Rock Hudson'GROUP BY yrHAVING COUNT(title) > 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>List the film title and the leading actor for all of the films ‘Julie Andrews’ played in.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT title, nameFROM movie JOIN casting ON (movie.id = movieid)       JOIN actor ON (actorid = actor.id)WHERE movieid IN(SELECT movieid FROM casting JOIN actor ON (actor.id = actorid) WHERE name = 'Julie Andrews') AND ord = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Obtain a list, in alphabetical order, of actors who’ve had at least 15 starring roles.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM movie JOIN casting ON (movie.id = movieid)       JOIN actor ON (actorid = actor.id)WHERE ord = 1GROUP BY nameHAVING COUNT(name) >= 15 ORDER BY name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>List the films released in the year 1978 ordered by the number of actors in the cast, then by title.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT title, COUNT(name)FROM movie JOIN casting ON (movie.id = movieid)       JOIN actor ON (actorid = actor.id)WHERE yr = 1978GROUP BY titleORDER BY COUNT(name) DESC, title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>List all the people who have worked with ‘Art Garfunkel’.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM movie JOIN casting ON (movie.id = movieid)       JOIN actor ON (actorid = actor.id)WHERE movieid in (SELECT movieid              FROM actor JOIN casting ON (actor.id = actorid)              WHERE name = 'Art Garfunkel') AND name != 'Art Garfunkel'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="8-Using-Null"><a href="#8-Using-Null" class="headerlink" title="8. Using Null"></a>8. Using Null</h2><p><strong>We can use the phrase IS NULL to pick out fields. We can use IS NOT NULL similarly.</strong></p><ol><li>List the teachers who have NULL for their department.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT nameFROM teacherWHERE dept IS NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Note the INNER JOIN misses the teachers with no department and the departments with no teacher. (This example show that what the effect of INNER JOIN looks like.)<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT teacher.name, dept.nameFROM teacher INNER JOIN dept ON (teacher.dept=dept.id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Use a different JOIN so that all teachers are listed. (This example show that what the effect of the left join looks like.)<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT teacher.name, dept.nameFROM teacherLEFT JOIN dept ON (teacher.dept = dept.id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Use a different JOIN so that all departments are listed. (This example show that what the effect of the right join looks like.)<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT teacher.name, dept.nameFROM teacherRIGHT JOIN dept ON (teacher.dept = dept.id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Use COALESCE to print the mobile number. Use the number ‘07986 444 2266’ if there is no number given. <pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, COALESCE(mobile, '07986 444 2266')FROM teacher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Use the COALESCE function and a LEFT JOIN to print the teacher name and department name. Use the string ‘None’ where there is no department.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT teacher.name, COALESCE(dept.name, 'None')FROM teacher LEFT JOIN dept ON (teacher.dept = dept.id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Use COUNT to show the number of teachers and the number of mobile phones.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT COUNT(name), COUNT(mobile)FROM teacher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Use COUNT and GROUP BY dept.name to show each department and the number of staff. Use a RIGHT JOIN to ensure that the Engineering department is listed.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT dept.name, COUNT(teacher.name)FROM teacher RIGHT JOIN dept ON (teacher.dept = dept.id)GROUP BY dept.name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Use CASE to show the name of each teacher followed by ‘Sci’ if the teacher is in dept 1 or 2 and ‘Art’ otherwise.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT teacher.name, CASE WHEN teacher.dept = 1      THEN 'Sci'      WHEN teacher.dept = 2      THEN 'Sci'      ELSE'Art' ENDFROM teacher LEFT JOIN dept ON (teacher.dept = dept.id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>Or we can use the combination of condition like the following answer:<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT teacher.name, CASE WHEN teacher.dept = 1 OR teacher.dept = 2      THEN 'Sci'      ELSE'Art' ENDFROM teacher LEFT JOIN dept ON (teacher.dept = dept.id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Use CASE to show the name of each teacher followed by ‘Sci’ if the teacher is in dept 1 or 2, show ‘Art’ if the teacher’s dept is 3 and ‘None’ otherwise.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT teacher.name,CASE WHEN teacher.dept = 1 OR teacher.dept = 2     THEN 'Sci'     WHEN teacher.dept = 2     THEN 'Art'     ELSE'None'ENDFROM teacher LEFT JOIN dept ON (teacher.dept = dept.id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="8-NSS-Tutorial"><a href="#8-NSS-Tutorial" class="headerlink" title="8+. NSS Tutorial"></a>8+. NSS Tutorial</h2><ol><li>Show the the percentage who STRONGLY AGREE<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT A_STRONGLY_AGREEFROM nssWHERE question='Q01'AND institution='Edinburgh Napier University'AND subject='(8) Computer Science'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Show the institution and subject where the score is at least 100 for question 15.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT institution, subjectFROM nssWHERE question='Q15'AND score >= 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>Show the institution and score where the score for ‘(8) Computer Science’ is less than 50 for question ‘Q15’<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT institution, scoreFROM nssWHERE question='Q15'AND subject='(8) Computer Science'AND score < 50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Show the subject and total number of students who responded to question 22 for each of the subjects ‘(8) Computer Science’ and ‘(H) Creative Arts and Design’.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT subject, SUM(response)FROM nssWHERE question='Q22'AND (subject='(H) Creative Arts and Design'     OR subject='(8) Computer Science')GROUP BY subject<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Show the subject and total number of students who A_STRONGLY_AGREE to question 22 for each of the subjects ‘(8) Computer Science’ and ‘(H) Creative Arts and Design’.<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT subject, SUM(response * A_STRONGLY_AGREE / 100)FROM nssWHERE question='Q22'AND (subject='(H) Creative Arts and Design'    OR subject='(8) Computer Science')GROUP BY subject<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="9-Window-functions"><a href="#9-Window-functions" class="headerlink" title="9-. Window functions"></a>9-. Window functions</h2><h2 id="9-Window-LAG"><a href="#9-Window-LAG" class="headerlink" title="9+. Window LAG"></a>9+. Window LAG</h2><h2 id="9-Self-join"><a href="#9-Self-join" class="headerlink" title="9. Self join"></a>9. Self join</h2><h2 id="10-1-SELECT-Quiz"><a href="#10-1-SELECT-Quiz" class="headerlink" title="10.1 SELECT Quiz"></a>10.1 SELECT Quiz</h2><ol><li>Select the code which produces this table<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, populationFROM worldWHERE population BETWEEN 1000000 AND 1250000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Pick the result you would obtain from this code:<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, populationFROM worldWHERE name LIKE 'Al%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>Answer: table-E</li><li>Select the code which shows the countries that end in A or L<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name FROM worldWHERE name LIKE '%a' OR name LIKE '%l'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Pick the result from the query<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name,length(name)FROM worldWHERE length(name)=5 and continent='Europe'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>Answer: table C</li><li>Here are the first few rows of the world table:. Pick the result you would obtain from this code:<br><code>SELECT name, area*2 FROM world WHERE population = 64000</code><br>Answer: table c</li><li>Select the code that would show the countries with an area larger than 50000 and a population smaller than 10000000<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, area, populationFROM worldWHERE area > 50000 AND population < 10000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Select the code that shows the population density of China, Australia, Nigeria and France<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT name, population/areaFROM worldWHERE name IN ('China', 'Nigeria', 'France', 'Australia')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="10-2-BBC-QUIZ"><a href="#10-2-BBC-QUIZ" class="headerlink" title="10.2 BBC QUIZ"></a>10.2 BBC QUIZ</h2><h2 id="10-3-Nobel-Quiz"><a href="#10-3-Nobel-Quiz" class="headerlink" title="10.3 Nobel Quiz"></a>10.3 Nobel Quiz</h2><h2 id="10-4-Nested-SELECT-Quiz"><a href="#10-4-Nested-SELECT-Quiz" class="headerlink" title="10.4 Nested SELECT Quiz"></a>10.4 Nested SELECT Quiz</h2><h2 id="10-5-SUM-and-COUNT-Quiz"><a href="#10-5-SUM-and-COUNT-Quiz" class="headerlink" title="10.5 SUM and COUNT Quiz"></a>10.5 SUM and COUNT Quiz</h2><h2 id="10-6-JOIN-Quiz"><a href="#10-6-JOIN-Quiz" class="headerlink" title="10.6 JOIN Quiz"></a>10.6 JOIN Quiz</h2><h2 id="10-7-JOIN-Quiz-2"><a href="#10-7-JOIN-Quiz-2" class="headerlink" title="10.7 JOIN Quiz 2"></a>10.7 JOIN Quiz 2</h2><h2 id="10-8-Using-Null-Quiz"><a href="#10-8-Using-Null-Quiz" class="headerlink" title="10.8 Using Null Quiz"></a>10.8 Using Null Quiz</h2><h2 id="10-9-Self-join-Quiz"><a href="#10-9-Self-join-Quiz" class="headerlink" title="10.9 Self join Quiz"></a>10.9 Self join Quiz</h2>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表的一些常用操作</title>
      <link href="/2021/02/20/LinkListAlgTrick/"/>
      <url>/2021/02/20/LinkListAlgTrick/</url>
      
        <content type="html"><![CDATA[<h2 id="链表结构定义"><a href="#链表结构定义" class="headerlink" title="链表结构定义"></a>链表结构定义</h2><p>以下的操作都是基于这种结构的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Definition for singly-linked list.</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    ListNode next<span class="token punctuation">;</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> ListNode next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="求链表长度"><a href="#求链表长度" class="headerlink" title="求链表长度"></a>求链表长度</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ListNode root表示链表的第一个结点</span>ListNode p <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    length<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逆置链表"><a href="#逆置链表" class="headerlink" title="逆置链表"></a>逆置链表</h2><p>逆置操作是使用非常多的操作，下面是头插法逆置链表的操作。必须熟练掌握</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断两个链表是否相等"><a href="#判断两个链表是否相等" class="headerlink" title="判断两个链表是否相等"></a>判断两个链表是否相等</h2><p><strong>1. 要求值相等并且长度相等。这是最常见的方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">!=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l1 <span class="token operator">==</span> l2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 要求值相等，但是两个链表的长度相差为1。这个判断方法在判断链表是否是回文链表时会用到</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">!=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，两者只有最后返回语句的差别。</p><h2 id="找链表的中间节点"><a href="#找链表的中间节点" class="headerlink" title="找链表的中间节点"></a>找链表的中间节点</h2><p><strong>当链表的个数为偶数个时，将中间两个元素中索引较大的那一个认为是中间元素，比如1-2-3-4，将3所在节点认为是中间节点。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">findMidNode</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数系列（一）线性组合</title>
      <link href="/2021/02/20/LinAlg1/"/>
      <url>/2021/02/20/LinAlg1/</url>
      
        <content type="html"><![CDATA[<h1 id="线性组合"><a href="#线性组合" class="headerlink" title="线性组合"></a>线性组合</h1><h3 id="1、主要内容"><a href="#1、主要内容" class="headerlink" title="1、主要内容"></a>1、主要内容</h3><ol><li> <strong>两个方程的线性组合</strong> ；</li><li> <strong>三个方程的线性组合</strong> ；</li><li> <strong>矩阵乘法的另一种认识</strong> 。<h3 id="2、正文"><a href="#2、正文" class="headerlink" title="2、正文"></a>2、正文</h3>例：</li></ol><p>$$<br>\left{<br>\begin{array}{c}<br>   2x - y=0 \ -x+2y=3<br>\end{array}\right.<br>$$</p><p>【通常的解法】：画出两行方程所表示的直线，进而确定直线 2x-y=0  与  -x+2y=3  两者的交点，交点便是方程组的解。（MIT课中称这种方式为行图像（Row image),因为它作的是每一行方程所代表的几何图形。）</p><p>【线性组合】：原方程可化为<br>$$x\begin{bmatrix}<br>2\<br>-1<br>\end{bmatrix}+y\begin{bmatrix}<br>-1\<br>2<br>\end{bmatrix}=\begin{bmatrix}<br>0\<br>3<br>\end{bmatrix}$$<br>&emsp;&emsp;认为该方程组的目的是在找一组系数 x、y 使得两个列向量在这组系数的作用下线性组合成目标向量。（这种方式被称为列图像，因为他通过作每一列的图像进行组合，从而得到结果）。</p><p>以上是从几何的角度对方程组进行了直观的认识，这里还有几个重要的细节，如下：</p><ol><li>向量（列向量）的分量的个数（也就是向量的维度）与该向量所在空间的维度相等(并不恰当的说法，但是能获得直观的认识)，向量的个数却与能组合得到的空间维度有关。（实际上，这里应该是线性无关的向量的个数，关于线性无关，以后再做讨论）</li></ol><p>$$\begin{bmatrix}<br>2\<br>-1<br>\end{bmatrix}\begin{bmatrix}<br>-1\<br>2<br>\end{bmatrix}$$都是2维向量，所以它们所在（或进行组合的空间）是二维的，也就是2维平面。</p><ol start="2"><li>若$$\begin{bmatrix}<br>2\ </li></ol><p>-1<br>\end{bmatrix}\begin{bmatrix}<br>-1\<br>2<br>\end{bmatrix}$$具有线性关系，也就是说，其中一个向量可以由两一个向量表示出来，则只能得到1维空间。显然这里不具有线性关系。若将$$\begin{bmatrix}<br>0\<br>3<br>\end{bmatrix}$$改为任意数，即改成任意a、b所表示的二维向量$$\begin{bmatrix}<br>a\<br>b<br>\end{bmatrix}$$组合$$\begin{bmatrix}<br>2\<br>-1<br>\end{bmatrix}与\begin{bmatrix}<br>-1\<br>2<br>\end{bmatrix}$$得到2D空间中的任意一个向量，而二维空间可以由所有的这些向量所表示出来，所以我们就可以通过组合得到二维空间。</p><p>例：这是一个三维空间的例子。$$\left{ \begin{array}{c}  2x-y=0 \<br>-x+2y-z=-1\<br>-3y+4z=4\end{array}\right. $$</p><p>&emsp;&emsp;通常做法：在三维空间中，一个方程确定一个平面。这三个不相关的方程确立三个空间平面，且相交于一点，该点便是方程的解。（行图像）<br>线性组合：$$x\begin{bmatrix}<br>2\<br>-1\<br>0<br>\end{bmatrix}+y\begin{bmatrix}<br>-1\<br>2\<br>3\end{bmatrix}+z\begin{bmatrix}<br>0\<br>-1\<br>4\end{bmatrix}=\begin{bmatrix}<br>0\<br>-1\<br>4\end{bmatrix}$$<br>&emsp;&emsp;该方程组的目的是找到一个能够使三个列向量组合得到目标向量的系数（x,y,z).<br>若只有两个列向量，也只能组合得到3D-space中的2d-planet（这就是向量的个数与组合得到的空间的维度有关）。<br>&emsp;&emsp;由于这三个列向量均有三个分量，所以它们都位于三维空间中。<br>若这三个向量中一个向量可以由另外两个向量组合得到，也就是说，这三个向量，并不两两线性无关。这时，通过组合也就只能得到2D空间，这也就是说：列向量线性无关的个数决定了所能组合的空间的维度。</p>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数目录</title>
      <link href="/2021/02/20/LinAlgCatalog/"/>
      <url>/2021/02/20/LinAlgCatalog/</url>
      
        <content type="html"><![CDATA[<h4 id="线性代数系列（一）–线性组合"><a href="#线性代数系列（一）–线性组合" class="headerlink" title="线性代数系列（一）–线性组合"></a><a href="https://blog.csdn.net/qq_41634283/article/details/88650837" target="_blank" rel="noopener">线性代数系列（一）–线性组合</a></h4><h4 id="线性代数系列（二）–矩阵变换"><a href="#线性代数系列（二）–矩阵变换" class="headerlink" title="线性代数系列（二）–矩阵变换"></a><a href="https://blog.csdn.net/qq_41634283/article/details/95532436" target="_blank" rel="noopener">线性代数系列（二）–矩阵变换</a></h4><h4 id="线性代数系列（三）–向量空间"><a href="#线性代数系列（三）–向量空间" class="headerlink" title="线性代数系列（三）–向量空间"></a><a href="https://blog.csdn.net/qq_41634283/article/details/95942759" target="_blank" rel="noopener">线性代数系列（三）–向量空间</a></h4><h4 id="线性代数系列（四）–解方程组"><a href="#线性代数系列（四）–解方程组" class="headerlink" title="线性代数系列（四）–解方程组"></a><a href="https://blog.csdn.net/qq_41634283/article/details/97612319" target="_blank" rel="noopener">线性代数系列（四）–解方程组</a></h4><h4 id="线性代数系列（五）–线性相关性"><a href="#线性代数系列（五）–线性相关性" class="headerlink" title="线性代数系列（五）–线性相关性"></a><a href="https://blog.csdn.net/qq_41634283/article/details/97614441" target="_blank" rel="noopener">线性代数系列（五）–线性相关性</a></h4><h4 id="线性代数系列（六）–四个基本子空间"><a href="#线性代数系列（六）–四个基本子空间" class="headerlink" title="线性代数系列（六）–四个基本子空间"></a><a href="https://blog.csdn.net/qq_41634283/article/details/98201023" target="_blank" rel="noopener">线性代数系列（六）–四个基本子空间</a></h4><h4 id="线性代数系列（七）–矩阵空间"><a href="#线性代数系列（七）–矩阵空间" class="headerlink" title="线性代数系列（七）–矩阵空间"></a><a href="https://blog.csdn.net/qq_41634283/article/details/98521827" target="_blank" rel="noopener">线性代数系列（七）–矩阵空间</a></h4><h4 id="线性代数系列（八）–线性代数和图论"><a href="#线性代数系列（八）–线性代数和图论" class="headerlink" title="线性代数系列（八）–线性代数和图论"></a><a href="https://blog.csdn.net/qq_41634283/article/details/98658541" target="_blank" rel="noopener">线性代数系列（八）–线性代数和图论</a></h4><h4 id="线性代数系列（九）–正交矩阵和空间"><a href="#线性代数系列（九）–正交矩阵和空间" class="headerlink" title="线性代数系列（九）–正交矩阵和空间"></a><a href="https://blog.csdn.net/qq_41634283/article/details/98783750" target="_blank" rel="noopener">线性代数系列（九）–正交矩阵和空间</a></h4><h4 id="线性代数系列（十）–子空间投影和最小二乘法"><a href="#线性代数系列（十）–子空间投影和最小二乘法" class="headerlink" title="线性代数系列（十）–子空间投影和最小二乘法"></a><a href="https://blog.csdn.net/qq_41634283/article/details/99348369" target="_blank" rel="noopener">线性代数系列（十）–子空间投影和最小二乘法</a></h4><h4 id="线性代数系列（十一）–正交矩阵和正交化"><a href="#线性代数系列（十一）–正交矩阵和正交化" class="headerlink" title="线性代数系列（十一）–正交矩阵和正交化"></a><a href="https://blog.csdn.net/qq_41634283/article/details/99410448" target="_blank" rel="noopener">线性代数系列（十一）–正交矩阵和正交化</a></h4>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用总结</title>
      <link href="/2021/02/19/LinuxSummary/"/>
      <url>/2021/02/19/LinuxSummary/</url>
      
        <content type="html"><![CDATA[<h2 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h2><p><strong>根目录结构</strong><br>进入根目录：<code>cd /</code><br>dev：（device）存储设备文件信息<br>etc：（etceteras）当前操作系统用户所有的配置信息<br>home：（home）当前用户的主目录<br>lib：（library）操作系统使用的库文件及其配置信息<br>mnt：（mount）手动挂载的目录<br>media：（media）系统自动挂载的目录<br>usr：（user）资源包管理目录，存放当前用户的信息<br>bin：（binary）Linux操作系统下可执行的系统级的二进制命令<br>sbin：（super binary）超级用户用到的可执行的二进制命令<br>boot：（boot）开机时需要加载的文件和配置<br>proc：（processes）存储系统统计信息<br>root：（root）root用户的主目录<br>run：（run）存放系统运行时需要的文件<br><strong>提示符介绍</strong><br><code>[xiaoguan@master destop]$</code><br>xiaoguan表示当前用户名。<br>@与at同音，表示在<br>master是主机名<br>desktop是当前目录<br>$表示普通用户，#表示超级用户<br><strong>以树状形状显示当前文件或目录</strong><br>首先需要安装tree：<code>sudo yum -y install tree</code>。centos下的命令<br>然后在目录下执行命令：<code>tree</code><br><strong>查看当前目录下所有文件和目录信息</strong><br>命令：<code>ls</code>。全称list<br>查看文件的详细信息：<code>ls -l</code>。<br>查看所有文件，显示隐藏文件：<code>ls -a</code>。<br>递归列出所有子目录（我认为这个可以用tree命令代替）：<code>ls -R</code>。<br><strong>进入特定目录</strong><br>命令：<code>cd</code>。Change directory<br>当前目录：<code>cd ./</code><br>当前目录的上级目录：<code>cd ../</code><br>进入家目录：<code>cd ~</code>和<code>cd</code><br><strong>查看当前所在目录</strong><br>命令：<code>pwd</code>。printf working directory<br><strong>创建单级目录</strong><br><code>mkdir name</code>。make directory<br><strong>创建多级目录</strong><br><code>mkdir -p name/subdir</code>。<br><strong>删除空目录</strong><br><code>rmdir name</code>。remove directory<br><strong>删除目录及目录里的所有内容</strong><br><code>rm -r dirname</code>。remove directory -recursive<br><strong>创建文件</strong><br><code>touch filename</code>。<br><strong>删除文件</strong><br><code>rm filename</code>。<br><strong>rm命令的一些注意事项</strong><br>rm删除是不可恢复，是彻底删除<br>参数：<code>-i</code>表示提示用户是否需要删除目录。<code>-f</code>-force，强制删除</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代数课程体系</title>
      <link href="/2021/01/31/HistoryAlger/"/>
      <url>/2021/01/31/HistoryAlger/</url>
      
        <content type="html"><![CDATA[<h2 id="一、代数类课程体系"><a href="#一、代数类课程体系" class="headerlink" title="一、代数类课程体系"></a>一、代数类课程体系</h2><ul><li>高等代数与解析几何</li><li>抽象代数</li><li>有限群表示论</li><li>李代数</li><li>数论（代数部分）</li></ul><h2 id="二、代数的发展"><a href="#二、代数的发展" class="headerlink" title="二、代数的发展"></a>二、代数的发展</h2><p><strong>总述</strong></p><ul><li>在古埃及就记录了一元一次方程求解问题</li><li>丢番图：代数学重要人物，被称为代数学之父</li><li>花拉子米：提出了方程两边同时加上或减去一个相同的项，方程仍然相等。被称为代数学之父</li><li>中国：著名人物李善兰。它的主要贡献是翻译西方数学名著，如《几何原本》，创造了许多数学名词，这些名词到现在还在沿用。</li></ul><p>一元一次方程的发展有两个方向，一个是一元扩展到多元，一个是一次扩展到多次。</p><p><strong>一元扩展到多元</strong></p><ul><li>二元一次方程组的求解：行列式的方法几乎是莱布尼兹和关孝和同时在做的工作。利用行列式的方法解决了二元一次方程组的求解问题。</li><li>中国古代《九章算术》中也有三元一次方程组消元法的描述。给出了消元法的思想。这一成果要早1000多年</li><li>西尔维斯特提出了矩阵（Matrix）的概念。注意：西尔维斯特提出的是Matrix的概念，矩阵是李善兰发明的词。</li><li>凯莱：对两个二元一次方程组进行了变量替换，定义了矩阵乘法。矩阵乘法的定义是一个开创性的工作。但是矩阵乘法不满足交换律，此后，代数的世界不再是可交换的了。</li></ul><p><strong>一次扩展到高次</strong></p><ul><li>古巴比伦人记录了这样的式子：$x-\frac{60}{x}=7$.古巴比伦人研究了一元二次方程问题，并给出了解答。一个一元二次方程可以改写成：$x^2-sx+p=0$.古巴比伦人给出的解答是这样的：$$\frac{s}{2}=\frac{1}{2}(x_1+x_2)$$ $$\sqrt{(\frac{s}{2})^2-p}=\frac{1}{2}(x_1-x_2)$$ 这是解的二元一次方程。这个方程是很好解的。因此可以给出解的式子：$$x_1=\frac{s}{2}+\sqrt{(\frac{s}{2})^2-p}$$ $$x_2=s-x_1$$ 于是，讨论三次方程的解是不是可以构造一个三元一次方程组呢。</li><li>意大利数学家费罗，塔尔塔利亚，卡尔达诺研究了四次方程的问题。下面看一个恒等式：$$(p-q)^3=-3pq(p-q)+(p^3-q^3)$$ 这个恒等式改写一下就是：$$(p-q)^3+3pq(p-q)-(p^3-q^3)=0$$ 这是一个三次方程的形式，因此可以得到一个满足$p-q$的方程：$$x^3+3pqx-(p^3-q^3)=0$$ 由于p-q已经是一个根，因此我们只需要解一个二次方程便可以解这个三次方程，二次方程求解已经解决，从而三次方程是可解的。</li><li>卡尔达诺的学生费拉里解决了四次方程的问题。他的主要工作是对四次方程配完全平方。对于四次方程：$$x^4+bx^2+cx+d=0$$ 考虑：$$(x^2-t)^2=(b-2t)x^2+cx+(d+t^2)$$ 若右侧有完全平方项，当且仅当：$$c^2-4(b-2t)(d+t^2)=0$$ 这是t的一个三次方程，三次方程可解，从而四次方程可解。</li></ul><p><strong>五次方程的可解问题</strong></p><ul><li>相关的著名人物：韦达，范德蒙，拉格朗日，阿贝尔，伽罗瓦。</li><li>韦达开创了字母符号体系，发现了韦达公式。为之后的工作做了铺垫。</li><li>范德蒙是最早开始探索的五次方程的解的人。二次，三次，四次方程的解法并不是统一的。范德蒙想统一解这些方程的方法。他发现了解高次方程最本质的东西，基本的思路源于古巴比伦人解二次方程的方法。古巴比伦人解二次方程时列的方程组中，第一个式子是根的和，第二个式子的系数一个是1一个是-1，这两个数其实是1的平方根。从这里出发，范德蒙列出了下面的方程组：$$\begin{cases}x_1+x_2+x_3=-\frac{b}{a} \ x_1+wx_2+w^2x_3=? \ x_1+w^2x_2+w^4x_3=? \ w^3=1\end{cases}$$ 这个方程组被证明是可解的。</li><li>后来，拉格朗日利用范德蒙的想法统一解决三、四次方程的解，发现五次以上方程很难解。</li><li>拉菲尼和阿贝尔：证明了一般五次方程不可根式解</li><li>阿贝尔：某些高次方程可解。某些五次方程是可以用根式解的。提出了阿贝尔群的概念</li><li>伽罗瓦：做出了开创性工作。提出了高次方程可解的充要条件。韦达和范德蒙的工作说明了根具有对称性。不同方程的根对称性不同。此外，他提出来刻画对称性。一个方程的根对称性强度预示着方程能不能用根式解。提出了群的概念来刻画对称性。将方程可解性转换为它所对应的群的结构是什么。从此以后代数学突飞猛进的发展。</li></ul><p><strong>抽象群论的具体化</strong><br>将抽象的群具体地实现为矩阵。在戴德金和弗罗贝乌斯的通信中诞生了群表示论。</p><p><strong>马凯的工作</strong><br>正多边形和正多面体的对称群的所有不同的矩阵实现可用一个图来表现出来，这些图没别对应于一个单李代数。</p><p><strong>代数课程体系</strong><br><img src="/img/algebrasys.png" /></p>]]></content>
      
      
      <categories>
          
          <category> 代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译器设计</title>
      <link href="/2021/01/30/Compilerdesign2/"/>
      <url>/2021/01/30/Compilerdesign2/</url>
      
        <content type="html"><![CDATA[<h2 id="三、语法分析器"><a href="#三、语法分析器" class="headerlink" title="三、语法分析器"></a>三、语法分析器</h2><h3 id="1-语法的形式化表示"><a href="#1-语法的形式化表示" class="headerlink" title="1. 语法的形式化表示"></a>1. 语法的形式化表示</h3><p>$$G = (V, T, P, S)$$</p><p>$G$：一个特定的语法。$V$：表示变量。$T$：终结符。$P$：产生式。$S$：开始符号<br><img src="/img/compiler/gramExample.png" /><br>这是一个语法的例子。箭头左边和右边的内容构成产生式。</p><ul><li>产生式：从这个例子中可以很清楚的看出产生式是长什么样的。至于为什么这么叫，这到不重要。可以从其名字和形式上来理解。顾明思义，产生式，左边的符号可以产生右边的内容。从形式上看，箭头表示可以用右边的内容替代左边的内容。</li><li>变量：产生式左边只出现了一个符号即E，因此这个语法的变量$V$={E}。通俗来讲，变量就是产生式左边出现的符号。</li><li>开始符号：$S$表示开始符号，它是变量的其中一个，显然，这里只有一个变量，因此$S$={E}。</li><li>终结符：通俗来讲就是产生式右边出现而左边没有出现的符号。在这个例子中$T$={+，*，id}。如何来理解呢，产生式左边出现的符号一定可以用右边的内容来替换。因此，式子中如果出现左边的符号，那么这个式子还可以继续替换下去。终结符是指右边出现而左边没有出现的符号，因此，式子遇到这样的符号就不可以继续替换，从而终止，取终结之意，命名为终结符。有没有这样一种情况：右边出现了可以继续替换的内容，而左边没有出现？既然左边没有出现，即使右边出现了，那我们用什么替换呢？显然，这种情况是不存在的。</li></ul><h3 id="2-最左推导（Left-Most-Derivation）和最右推导（Right-Most-Derivation）"><a href="#2-最左推导（Left-Most-Derivation）和最右推导（Right-Most-Derivation）" class="headerlink" title="2. 最左推导（Left Most Derivation）和最右推导（Right Most Derivation）"></a>2. 最左推导（Left Most Derivation）和最右推导（Right Most Derivation）</h3><p>下面是关于最左最右推导的例子。<br><img src="/img/compiler/LMDRMD.png" /><br>从例子中可以发现，最左推导每次都是替换右部最左边的变量，而最右推导每次都是替换右部最右边的变量。这就是最左最右推导的基本理解。<br>在这个例子中，最左推导，最右推导都不是唯一的。采用两种不同的最左推导方式可以得出同样的结果，采用两种不同的最右推导方式也可以得出同样的结果。像这样的不止一个推导式的语法称为歧义语法，由于其推导式不唯一从而解析树也不唯一，这就是歧义语法。于是我们有下面这样的问题：</p><ul><li>如何判断语法是歧义的？</li><li>如何将歧义语法转换为非歧义的？</li></ul><p>不幸的是，这两个问题的答案并不令人满意。没有判断语法歧义的算法，也没有将歧义语法转换为非歧义的算法。因此，判断一个语法是否是歧义的就需要进行多次尝试，看是否能够找出两个不同的解析树。虽然规律是死的，但是人是活的，于是最好的办法就是做出一些规定，使得歧义语法不能存在。</p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译器设计</title>
      <link href="/2021/01/29/Compilerdesign1/"/>
      <url>/2021/01/29/Compilerdesign1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、编译器简单介绍"><a href="#一、编译器简单介绍" class="headerlink" title="一、编译器简单介绍"></a>一、编译器简单介绍</h2><h3 id="1-高级语言的翻译过程"><a href="#1-高级语言的翻译过程" class="headerlink" title="1. 高级语言的翻译过程"></a>1. 高级语言的翻译过程</h3><p><strong>高级语言（HLL）→预处理器（preprocessor）→编译器→汇编编译器→链接器/装入程序</strong></p><p>高级语言经过预处理器的处理会形成纯净的高级语言，预处理器会处理头文件和宏。纯净的高级语言经过编译器转化为汇编语言。汇编语言经过汇编编译器被编译出机器语言，即可执行程序。机器语言经过装入程序装入内存。有时还需要链接一些函数库。这是链接器要做的工作。<br>汇编器是依赖于平台的，因为它要编译出机器语言，而机器语言是依赖于硬件平台的。这门课程主要关注编译器的工作，即纯净的高级语言如何被编译成汇编语言。</p><h3 id="2-编译器工作的流程"><a href="#2-编译器工作的流程" class="headerlink" title="2. 编译器工作的流程"></a>2. 编译器工作的流程</h3><img src="/img/compiler/compilerworkflow.jpg"/><p>它主要包含以下几个模块：</p><ul><li>词法分析：它的输入是高级语言，输出是token流。它将高级语言程序token化，然后将token以流的形式输出。</li><li>语法分析：语法分析的输入是token流。语法分析器又可以称为解析器，它解析token流，看token是否符合语法规则要求。如果不符合就报错。它输出解析树</li><li>语义分析：输入的是解析树，语法分析阶段是分析程序中是否有语法错误，而语义分析阶段则是分析程序中是否存在语义错误，具体内容参考课本。</li><li>中间代码生成：中间代码生成模块的输入是有语义的解析树，经过词法分析，语法分析和语义分析的程序基本上是没有错误的程序了。因此就要就行翻译，中间代码生成可以生成三地址码。</li><li>代码优化：对程序进行优化，提高程序的效率，输出优化后的程序。</li><li>目标代码生成：生成目标代码</li><li>汇编程序：编译器的最终输出程序。</li><li>两个辅助模块：符号表管理模块，错误处理模块。这两个模块在整个编译流程中都会用到。</li></ul><p>下面是一个比较具体的例子：<br><img src = "/img/compiler/workflowexample.png"/><br>词法分析直接接收高级语言程序，然后将其token化。语法分析器将会解析token流，判断其中是否存在语法错误。将解析过的token流送给语义分析模块。语义分析模块进行语义检查，之后送给中间代码生成器。中间代码生成器产生中间代码，然后送给代码优化模块。代码优化模块进行优化，将优化后的程序送给目标代码生成模块。目标代码生产模块产生目标代码，即汇编程序。</p><p>其中，词法分析，语法分析，语义分析，中间代码生成器都是与平台无关的模块，因此将其称为编译器的前端。而代码优化，中间代码生成及汇编器是与平台有关的，将其称为编译器的后端模块。</p><p>一些常用工具：词法分析：Lec。语法分析：Yacc。整个前端工具：LANCE</p><p><strong>为什么会有中间代码？</strong><br>注意到后面的代码优化和目标代码生成是依赖于平台的，而词法分析，语法分析，语义分析都是与平台无关的。对于一个编译器，如果要移植到不同的平台上，只需要改掉它的后端就可以，而无需改动整个编译器，因此加入了中间代码生成模块，在中间生成一次中间代码。当编译器移植到不同的平台上时，前端部分无需改动，中间代码是相同的，改动后端，将中间代码编译成不同的汇编程序以适应平台的需要。</p><h2 id="二、词法分析"><a href="#二、词法分析" class="headerlink" title="二、词法分析"></a>二、词法分析</h2><h3 id="1-词法分析的作用"><a href="#1-词法分析的作用" class="headerlink" title="1. 词法分析的作用"></a>1. 词法分析的作用</h3><ul><li>去除注释</li><li>去除空白行和空格</li><li>记录行号（比如，错误处理器报错时会用到行号）</li></ul><p>词法分析器会逐个读取字符，然后去除注释，空白行和空格，并记录行号，最终形成token流。看下面一个例子：<br><img src="/img/compiler/tokenExample.png"/></p><p>这个例子包含25个token，其中要特别注意的是：引号内的字符串是一个token。</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论知识总结3</title>
      <link href="/2021/01/28/DataBaseSummary3/"/>
      <url>/2021/01/28/DataBaseSummary3/</url>
      
        <content type="html"><![CDATA[<h2 id="三、关系数据库标准语言SQL"><a href="#三、关系数据库标准语言SQL" class="headerlink" title="三、关系数据库标准语言SQL"></a>三、关系数据库标准语言SQL</h2><h3 id="1-SQL"><a href="#1-SQL" class="headerlink" title="1. SQL"></a>1. SQL</h3><p><strong>1. SQL的特点</strong><br>了解一下SQL的特点。</p><ul><li>综合统一<ul><li>集数据定义语言 DDL（Data Definition Language），数据操纵语言 DML（Data Manipulation Language），数据控制语言 DCL（Data Control Language） 功能于一体。</li><li>可以独立完成数据库生命周期中的全部活动：<ul><li>定义关系模式，插入数据，建立数据库；</li><li>对数据库中的数据进行查询和更新；</li><li>数据库重构和维护</li><li>数据库安全性、完整性控制等</li><li>用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据的运行。</li><li>数据操作符统一</li></ul></li></ul></li><li>高度非过程化<ul><li>非关系数据模型的数据操纵语言“面向过程”，必须制定存取路径</li><li>SQL只要提出“做什么”，无须了解存取路径。</li><li>存取路径的选择以及SQL的操作过程由系统自动完成。</li></ul></li><li>面向集合的操作方式<ul><li>非关系数据模型采用面向记录的操作方式，操作对象是一条记录</li><li>SQL采用集合操作方式：</li><li>操作对象、查找结果可以是元组的集合</li><li>一次插入、删除、更新操作的对象可以是元组的集合</li></ul></li><li>以同一种语法结构提供多种使用方式<ul><li>SQL是独立的语言<ul><li>能够独立地用于联机交互的使用方式</li></ul></li><li>SQL又是嵌入式语言<ul><li>SQL能够嵌入到高级语言（例如C，C++，Java）程序中，供程序员设计程序时使用</li></ul></li></ul></li><li>SQL功能极强，完成核心功能只用了9个动词<table><thead><tr><th align="center">SQL功能</th><th align="center">动词</th></tr></thead><tbody><tr><td align="center">数据查询</td><td align="center">SELECT</td></tr><tr><td align="center">数据定义</td><td align="center">CREATE、DROP、ALTER</td></tr><tr><td align="center">数据操纵</td><td align="center">INSERT、UPDATE、DELETE</td></tr><tr><td align="center">数据控制</td><td align="center">GRANT、REVOKE</td></tr></tbody></table></li></ul><p><strong>2. SQL对关系数据库三级模式的支持</strong><br>下面的图引自中国人民大学王珊老师等的数据库课程的PPT。<br><img src="/img/SQLSchema.png"/></p><ul><li>基本表<ul><li>本身独立存在的表</li><li>SQL中一个关系就对应一个基本表</li><li>一个(或多个)基本表对应一个存储文件</li><li>一个表可以带若干索引</li><li>存储文件</li></ul></li><li>逻辑结构组成了关系数据库的内模式<ul><li>物理结构是任意的，对用户透明</li></ul></li><li>视图<ul><li>从一个或几个基本表导出的表</li><li>数据库中只存放视图的定义而不存放视图对应的数据</li><li>视图是一个虚表</li><li>用户可以在视图上再定义视图</li></ul></li></ul><p>【总结】前面两个部分的内容主要是抄自PPT，这部分内容比较固定。</p><h3 id="2-数据定义"><a href="#2-数据定义" class="headerlink" title="2. 数据定义"></a>2. 数据定义</h3><p>SQL的数据定义功能包括：模式定义，表定义，视图定义和索引定义。现代数据库系统提供了一个层次化的数据库对象命名机制。一个关系数据库管理系统的实例中可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表、视图和索引等数据库对象。<br><img src="/img/SQLDefineStatement.png" /></p><p>下面有一个需要注意的点：</p><ul><li>SQL标准并不提供修改模式定义和修改视图定义的操作。因此修改模式定义和修改视图定义应该先删除然后再重建。</li></ul><p><strong>1. 数据字典</strong><br>数据字典本质上也是表，存储着一些特殊的数据。不同之处在于，数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有的定义信息。关系数据库管理系统在执行SQL的数据定义语句时，实际上就是在更新数据字典中的信息。下面是数据字典包含的定义信息：</p><ul><li>关系模式，表，视图，索引定义</li><li>完整性约束定义</li><li>各类用户对数据库的操作权限</li><li>统计信息</li></ul><p><strong>2. 定义模式</strong><br>定义一个模式实际上就是定义了一个命名空间，模式没有包含很多信息，它像一个目录。定义完模式后，我们就可以在模式中进一步定义该模式的数据库对象。<br>定义语句：<code>create schema &lt;模式名&gt; authorization &lt;用户名&gt;</code>。（SQL语句大小写都可以，好像通常都是大写，这里为了写博客方便，采用小写。）<br>表示定义一个模式，然后把这个模式授权给指定用户。模式名可以不指定，这时就会采用用户名作为模式名。</p><p><strong>3. 删除模式</strong><br>删除语句：<code>drop schema &lt;模式名&gt; &lt;cascade|restrict&gt;</code><br>删除指定的模式。有两种删除方式</p><ul><li>cascade：删除该模式及该模式下的所有对象</li><li>restrict：仅当该模式没有定义对象时才能删除。如果该模式下有对象，则拒绝该删除语句的执行。</li></ul><p><strong>4. 基本表的定义</strong><br>建表时需要注意内容：表名，列名，列类型，列级完整性约束，表级完整性约束。此外在括号中，列名 列类型 列级完整性约束中间隔着空格构成一个项，项与项中间使用逗号隔开，表级完整性约束作为一个项习惯性写在最后。下面是一个列子：</p><pre class="line-numbers language-SQL"><code class="language-SQL">create table sc(    Id int not null,    Sno char(9),    Cno char(4),    Grade smallint,    primary key (Sno, Cno),    forenign key (Sno) references Student(Sno),    forenign key (Cno) references Course(Cno));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Id int not null</code>包含了列名，列类型和列级完整性约束。有的列比如<code>Grade smallint</code>，</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论知识总结1</title>
      <link href="/2021/01/27/DataBaseSummary1/"/>
      <url>/2021/01/27/DataBaseSummary1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库介绍"><a href="#一、数据库介绍" class="headerlink" title="一、数据库介绍"></a>一、数据库介绍</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论知识总结2</title>
      <link href="/2021/01/27/DataBaseSummary2/"/>
      <url>/2021/01/27/DataBaseSummary2/</url>
      
        <content type="html"><![CDATA[<h2 id="二：关系数据库"><a href="#二：关系数据库" class="headerlink" title="二：关系数据库"></a>二：关系数据库</h2><h3 id="1-关系模型"><a href="#1-关系模型" class="headerlink" title="1. 关系模型"></a>1. 关系模型</h3><p><strong>1. 关系数据结构</strong><br>关系数据模型有三个要素：关系数据结构，关系操作集合，关系完整性约束。<br>关系模型只有单一的数据结构，即关系。关系，在用户的视角下就是一张二维表。二维表的表头是对元组的描述。元组就是一张表中的一条条的记录。每个记录有一个或多个字段组成。而且这些字段的名字和类型是由表头（元组模式）决定的。下面介绍一些与该数据结构相关的概念：</p><ul><li><strong>域</strong>：通俗来讲，就是某一属性的取值范围。元组的每一个字段的取值都是在指定的域中进行取值。</li><li><strong>笛卡尔积</strong>：有些排列组合的感觉。给定一组域，笛卡尔积就是这些域的所有值的任意组合。</li><li><strong>基数</strong>：笛卡尔积可以看成是一个空间。（可以把空间理解成一种特殊的集合）。基数的值等于所有域的大小的乘积。实际上就是有多少种可能的组合。</li><li><strong>关系</strong>：给定一组域，笛卡尔积就是这些域的所有值的任意组合。笛卡尔积也可以称为笛卡尔空间。给定一组域，关系就是这组域的笛卡尔空间的一个子集，表示为$R(D_{1},D_{2},…D_{n})$。为什么是子集？给定一组域，笛卡尔空间描述了这组域所有可能的组合情况。而一个关系（或者理解为一张包含数据的二维表）的元组基本不可能包含所有的情况。这里面有一些原因，比如：某些字段虽然在做笛卡尔积的时候是可以进行组合的，但是在现实中却没有实际意义。我很想在这里举一个实际的例子，但是还没有想出来。对于给定的域，域的个数称为关系的<strong>目或度</strong>。当n=1的时候称为单元关系。关系的元素是<strong>元组</strong>，而元组的元素是<strong>属性</strong>或者说<strong>字段</strong>。其中有一类特殊的属性，称为<strong>码</strong>，它可以唯一的标识一个元组。码由一组属性组成，这时候称这组属性为<strong>候选码</strong>。若一个元组中所有的属性都是候选码，这个时候称这样的属性组为<strong>全码</strong>。在实际情况中，一个元组或者说一个关系模式的候选码可以有很多种选择，当然我们会选定其中的一个属性组作为用于唯一表示元组的码，这样的码就是<strong>主码</strong>。<br>【总结】：从笛卡尔空间的角度给出了关系的定义，然后介绍了关系的相关概念。比较难理解的是候选码和全码。实际上记住他们的作用就可以了，它们都是用于唯一标识元组的属性组。主码就是从候选码中选出的用于唯一标识元组的一个特定的属性组。</li></ul><p><strong>2. 关系模式</strong><br>类比于面向对象中的类和对象。类是型，对象是值。在数据库中，关系模式是型，关系是值。通俗来讲，关系模式是对关系的描述。主要包括的内容有：元组由哪些属性构成，属性来自的什么域，属性与域的对映关系，完整性约束。可以表示为：<br>$$R(U,D,DOM,F)$$</p><ul><li>R：关系名</li><li>D：属性所来自的域的集合</li><li>DOM：属性与域的映射关系</li><li>F：属性间数据依赖的集合</li></ul><p><strong>3. 关系的完整性约束</strong><br>关系的完整性约束主要有三类：实体完整性，参照完整性，用户定义的完整性。其中前两个是关系模型必须满足的约束条件，又被称为关系的两个不变性。用户定义的完整性是应用领域需要遵循的约束条件。可以这么理解：这个完整性约束就是指实际应用场景中遇到的一些约束。</p><p><strong>3.1 实体完整性</strong><br><strong>主属性</strong>就是指码的各个属性。构成码的各个属性都可以被称为主属性。实体完整性，如果能用一句话描述的话就是：<strong>主属性不能取空值</strong>。那么如何理解呢？实体这个概念是指现实中客观存在的事物。多个主属性构成的主码用于唯一标识元组，如果唯一标识元组的多个主属性可以为空。那么就会存在用空来标识的元组，那这样的元组是存在还是不存在呢？这就使客观存在的特性产生了疑问。因此，使用主属性不能为空的约束来保证实体完整性。</p><p><strong>3.2 参照完整性</strong><br>现实世界中的实体之间往往存在某种联系，考虑到这种联系引入了参照完整性。参照完整性<br>主要内容可以有两个部分来构成：参照完整性定义，参照完整性规则。下面给出我的理解。</p><p>【定义】<strong>设$F$是基本关系$R$的一个或一组属性，但不是关系$R$的码，$K_s$是基本关系$S$的主码。如果$F$与$K_s$相对应，则称$F$是$R$的外码，并称基本关系$R$为参照关系，基本关系$S$为被参照关系或目标关系。关系$R$和$S$不一定是不同的关系。</strong><br>F是R中的属性，$K_s$是关系S中的属性，并且是主码。F和$K_s$对应就是说，它们的取值来自同一个域。这样的两个来自同一个域的属性，分别坐落与不同的基本关系。其中一个只是普通的属性，一个是主码。这就构成了一种参照关系。并把F称为外码。（这里提到的属性可以为一个或一组属性）</p><p>【参照完整性规则】<strong>若属性（或属性组）$F$是基本关系$R$的外码，它与基本关系$S$的主码$K_s$相对应（基本关系$R$和$S$不一定是不同的关系），则对于$R$中每个元组在$F$上的值必须：</strong></p><ul><li><strong>或取空值</strong></li><li><strong>或者等于$S$中某个元组的主码值</strong><br>基本关系R和S不一定是不同的关系就是说，它们可以是相同的关系，这句话允许了同一关系内部属性间的引用关系。此外，理解了参照完整性规则规定了外码的取值基本上就掌握了参照完整性。</li></ul><p><strong>3.3 用户定义的完整性</strong><br>用户定义的完整性根据实际的开发情景进行定义。依赖于实际情况。</p><h3 id="2-关系代数"><a href="#2-关系代数" class="headerlink" title="2. 关系代数"></a>2. 关系代数</h3><p>前面在介绍关系数据结构的时候提到了关系数据模型的三个要素：关系结构，关系操作集合，关系完整性定义。这里把关系操作集合合并到了关系代数的部分。<br>传统的集合操作：并，交，差，笛卡尔积。<br>专门的关系操作：选择，投影，连接，除。<br><strong>1. 并</strong><br>关系R和关系S具有相同的目。关系R和关系S的并是指把关系R中的元组和关系S中的元组取并集<br><strong>2. 交</strong><br>关系R和关系S具有相同的目。关系R和关系S的交是指把关系R中的元组和关系S中的元组取交集<br><strong>3. 差</strong><br>关系R和关系S具有相同的目。关系R－关系S由属于R而不属于S的所有元组组成<br><strong>4. 笛卡尔积</strong><br>关系R和关系S作笛卡尔积是指关系R中的元组和关系S中的元组所有可能的组合。这里是对元组做横向拼接。关系R和关系S的目不一定是相同的。这里笛卡尔积的元素是元组，前面是域中所有可能的取值。<br><strong>5. 选择</strong><br>选择又称为限制。在MIT6.830课程中实现的SimpleDb中，使用的Predicate这个类来实现的选择功能，它提供了一个filter方法。所谓选择就是在关系中选择满足给定条件的各个元组。直观上看，选择是在行的角度上进行的运算。<br><strong>6. 投影</strong><br>投影就是选出若干属性列组成新的关系。由于消除了某些属性列，所以可能导致新的记录存在重复，所以投影操作会进行去重。在MIT6.830课程中实现的SimpleDb中，使用的Project这个类来实现的投影功能。<br><strong>7. 连接</strong><br>连接操作从两个关系的笛卡尔积中选择指定属性满足一定条件的元组。在MIT6.830课程中实现的SimpleDb中，使用的Join和JoinPredicate这个两个类来实现的连接功能。其中JoinPredicate主要用于做筛选的操作。直观上看，连接是在行的角度进行的操作。<br>常见的链接主要有两种：等值连接和自然连接。</p><ul><li>等值连接很好理解，如果两个元组所进行比较的两个属性上的值是相等的就对它们进行连接。</li><li>自然连接：自然连接要求两个关系中进行比较的属性组必须是相同的属性组。此外，拼接完元组后会把重复的属性列去掉。这是比较的特殊的地方。</li></ul><p><strong>悬浮元组</strong>：关系R和关系S在进行自然连接的时候，如果对于R中的某个元组t，在S中不存在能够与之连接的元组。那么这样的t称为悬浮元组。注意，在R和S中都有可能出现悬浮元组。所谓能够连接的两个元组，就是说这两个元组在指定的属性上的值是相等的。<br><strong>外连接：</strong> 不丢弃悬浮元组的链接<br><strong>左外连接：</strong> 在两个关系进行连接的时候，两个关系中都有可能出现悬浮元组，只保留左边关系中的元组<br><strong>右外连接：</strong> 只保留右边关系中的元组<br><strong>8. 除</strong><br>除运算借助例子比较好理解。但是这里我不打算举例子了。确实有些难理解<br>设关系R(X, Y)，S(Y, Z)。X，Y，Z为属性组，R中的Y与S中的Y可以有不同的名，但必须出自相同的域集。R除S表示，选出某些元组的属性组。这些元组在这些属性组上的象集Y必须覆盖S在Y上的投影。所谓象集就是当元组的属性组X取特定值时，属性组Y取值的集合。</p><h3 id="3-关系演算"><a href="#3-关系演算" class="headerlink" title="3. 关系演算"></a>3. 关系演算</h3><p>关系演算后期补充。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SimpleDb实现</title>
      <link href="/2021/01/09/SimpleDb/"/>
      <url>/2021/01/09/SimpleDb/</url>
      
        <content type="html"><![CDATA[<h3 id="一、表结构"><a href="#一、表结构" class="headerlink" title="一、表结构"></a>一、表结构</h3><p>谈到数据库（Database），第一印象就是一张数据表（Table）。一张表由很多个记录（或者叫行，或者叫元组（Tuple））组成。元组由字段（Field）组成。这些元组都有统一的模式（或者理解成表头），称为元组模式（Tuple Descriptor）。元组模式描述一个元组由哪些字段组成，以及这些字段的位置和类型，而元组便是字段值的集合。比如：</p><table><thead><tr><th>姓名（String）</th><th>学号（String）</th><th>年龄（int）</th><th>性别（String）</th><th>出生日期（String）</th><th>电话（Sting）</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>于是，可以得到如下重要的对象：字段，元组，元组模式，表。SimpleDb做出了如下的抽象：</p><ul><li>实现字段抽象的接口：<code>Field</code>。由于字段的类型是多样的，所以使用<code>Field</code>接口实现了更高一级的抽象，每个字段类型必须实现这个接口。这里仅实现了两种类型的字段int和String。</li><li>实现元组管理两个重要的类：<ul><li><code>tuple</code>：实现对元组的抽象。同一张表中的元组具有相同的元组模式，但是不同表中的元组不一定具有相同的元组模式。因此每个元组对象需要有一个属性用于记录它的元组模式。其实这一点我是根据<code>Tuple</code>类的构造器有个元组模式参数想到的。元组是一组字段（或者说字段值）的集合。因此，元组需要有集合属性用于存储该元组包含的字段。此外每个元组都有唯一的ID，用于唯一表示元组的位置。于是，SimpleDb用<code>RecordID</code>来唯一表示元组的位置。实现这个<code>RecordID</code>并不难。</li><li><code>TupleDesc</code>：实现对元组模式的抽象。</li></ul></li><li>实现目录管理的类：<code>CataLog</code>。</li><li>实现缓冲池抽象的类：<code>BufferPool</code>。它实现对内存缓冲池的抽象。首先定义了一些属性，每一个页包含多少字节，该缓冲池包含多少页。然后定义了对缓冲池的访问操作。<strong>由于前面的lab用到的缓冲池的内容不多，所以不过多介绍</strong>。</li><li>实现存储访问的类：<ul><li><code>HeapPage</code>：对缓存中页的抽象。页，实际上也是磁盘块。</li><li><code>HeapFile</code>：如果将页，磁盘块，缓存块等认为是物理上的概念，那么堆文件仍然像逻辑上的概念，因为它不实际存在。但它又似乎是一种物理上的概念，因为一个堆文件可由以多个页的形式实际存在。我把它理解为介于页和数据库表中间的一种概念。数据库中的表如果要存储在磁盘上，那么肯定需要用页（磁盘块）进行存储。但一个表大概率会占多个页，所以，就用堆文件实现了对这些页的组织。堆文件与数据库表是一对一的。</li></ul></li></ul><h3 id="二、具体实现类的详细介绍"><a href="#二、具体实现类的详细介绍" class="headerlink" title="二、具体实现类的详细介绍"></a>二、具体实现类的详细介绍</h3><h4 id="1、IntField"><a href="#1、IntField" class="headerlink" title="1、IntField"></a>1、IntField</h4><p><strong>属性</strong>：<code>IntField</code>并没有特别复杂的地方。包含一个基本的属性<code>value</code>，也就是该字段的值</p><h4 id="2、StringField"><a href="#2、StringField" class="headerlink" title="2、StringField"></a>2、StringField</h4><h4 id="3、Tuple"><a href="#3、Tuple" class="headerlink" title="3、Tuple"></a>3、Tuple</h4><h4 id="4、TupleDesc"><a href="#4、TupleDesc" class="headerlink" title="4、TupleDesc"></a>4、TupleDesc</h4><h4 id="5、CataLog"><a href="#5、CataLog" class="headerlink" title="5、CataLog"></a>5、CataLog</h4><h4 id="6、BufferPool"><a href="#6、BufferPool" class="headerlink" title="6、BufferPool"></a>6、BufferPool</h4>]]></content>
      
      
      <categories>
          
          <category> SimpleDb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SimpleDb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大端法和小端法</title>
      <link href="/2020/03/20/BigSmallEnd/"/>
      <url>/2020/03/20/BigSmallEnd/</url>
      
        <content type="html"><![CDATA[<p>区别大端法和小端法的方式就是关注最高有效字节（也可以关注最低有效字节）。最高有效字节在低地址的存储方式称为大端法，最高有效字节在高地址的方式称为小端法。比如十六进制数字：0x01234567。那么我们首先要确定01是最高有效字节（十六进制数一个数字占4位，因此一个字节可以转换成两个十六进制数），67是最低有效字节。根据之前的介绍，如果系统是按大端法存储的话，那么大端法的输出应该是：01 23 45 67。小端法的输出应该是：67 45 23 01。下面是一段演示代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>byte_pointer<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show_bytes</span><span class="token punctuation">(</span>byte_pointer start<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">{</span>    size_t i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %.2x"</span><span class="token punctuation">,</span>start<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test_show_bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ival <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">float</span> fval <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>ival<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pval <span class="token operator">=</span> <span class="token operator">&amp;</span>ival<span class="token punctuation">;</span>    <span class="token function">show_int</span><span class="token punctuation">(</span>ival<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_float</span><span class="token punctuation">(</span>fval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_pionter</span><span class="token punctuation">(</span>pval<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0x87654321</span><span class="token punctuation">;</span>    byte_pointer valp<span class="token operator">=</span><span class="token punctuation">(</span>byte_pointer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>val<span class="token punctuation">;</span>    <span class="token function">show_bytes</span><span class="token punctuation">(</span>valp<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_bytes</span><span class="token punctuation">(</span>valp<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_bytes</span><span class="token punctuation">(</span>valp<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大端法小端法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不利用第三个变量交换两个变量的值</title>
      <link href="/2020/03/20/ChangeNoThird/"/>
      <url>/2020/03/20/ChangeNoThird/</url>
      
        <content type="html"><![CDATA[<p><strong>主要是利用异或操作。不过，我们首先需要确定$a \bigoplus a=0$</strong><br>该操作并没有带来性能上的提升，下面是步骤详解。</p><table><thead><tr><th>步骤</th><th>a</th><th>b</th><th>备注</th></tr></thead><tbody><tr><td>初始</td><td>$23$</td><td>$56$</td><td></td></tr><tr><td>第一步</td><td>$23$</td><td>$23\bigoplus 56$</td><td>令b中有56</td></tr><tr><td>第二步</td><td>$23\bigoplus23\bigoplus56=56$</td><td>$23\bigoplus 56$</td><td>结合b去掉23只保留56，存储在a中</td></tr><tr><td>第三步</td><td>$56$</td><td>$56\bigoplus23\bigoplus 56=23$</td><td>结合a去掉56，只保留23，存储在b中</td></tr></tbody></table><p><strong>下面是测试程序：</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Before: a=%d,b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>    a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>    b <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"After:  a=%d,b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span>    <span class="token function">exchange</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>利用上面的方法，实现了对数组元素的交换：</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>y <span class="token operator">=</span> <span class="token operator">*</span>x<span class="token operator">^</span><span class="token operator">*</span>y<span class="token punctuation">;</span>    <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token operator">*</span>x<span class="token operator">^</span><span class="token operator">*</span>y<span class="token punctuation">;</span>    <span class="token operator">*</span>y <span class="token operator">=</span> <span class="token operator">*</span>x<span class="token operator">^</span><span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">reverse_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> first<span class="token punctuation">;</span>    <span class="token keyword">int</span> last<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>first<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>last<span class="token operator">=</span>cnt<span class="token number">-1</span><span class="token punctuation">;</span>first<span class="token operator">&lt;=</span>last<span class="token punctuation">;</span>first<span class="token operator">++</span><span class="token punctuation">,</span>last<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">==</span> last<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> aLength <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Before: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>aLength<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d]=%d, "</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse_array</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> aLength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nAfter:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>aLength<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d]=%d, "</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCmptKeyTec</title>
      <link href="/2020/03/20/CCmptKeyTec/"/>
      <url>/2020/03/20/CCmptKeyTec/</url>
      
        <content type="html"><![CDATA[<h2 id="简单介绍云计算的关键技术"><a href="#简单介绍云计算的关键技术" class="headerlink" title="简单介绍云计算的关键技术"></a>简单介绍云计算的关键技术</h2><ul><li>体系结构（Architecture）</li><li>数据存储（Data Storage）</li><li>计算模型（Computation Model）</li><li>资源调度（Resource Scheduling）</li><li>虚拟化（Virtualization）</li></ul><h3 id="体系结构（Architecture）"><a href="#体系结构（Architecture）" class="headerlink" title="体系结构（Architecture）"></a>体系结构（Architecture）</h3><p>云计算的体系结构通常分为三层：</p><ul><li>核心服务层</li><li>服务管理层</li><li>用户访问接口层</li></ul><p><img src="https://img-blog.csdnimg.cn/20200317220404106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjM0Mjgz,size_16,color_FFFFFF,t_70#pic_center"></p><p><strong>核心服务层</strong><br>将硬件基础设施、软件运行环境、应用程序抽象成服务，这些服务具有可靠性强、可用性高、规模可伸缩等特点，满足多样化的应用需求。基础设施一般就是底层的基础设施，包括硬件设施，对硬件设施的抽象和管理。从上图可以看出核心服务层又分成了三个子层：IaaS (Infrastructure-as-a-Service)基础设施即服务层，PaaS (Platform-as-a-Service)平台即服务层，SaaS (Software-as-a-Service)软件即服务层。</p><ul><li>IaaS提供硬件基础设施部署服务，为用户按需提供实体或虚拟的计算、存储和网络等资源。</li><li>PaaS是云计算应用程序运行环境，提供应用程序部署与管理服务。PaaS层提供软件工具和编程语言。</li><li>SaaS 是基于云计算基础平台所开发的应用程序。</li></ul><p>虽然上面的翻译都是…即服务层，不过我觉得这样会更好理解些：IaaS，是提供基础设施服务的子层，可以将其理解为基础设施的服务。PaaS，在基础设施上层构建的子层，它包含了软件的成分，提供了运行环境，是的基础设施能够作为一个服务平台开放出了，可以将其理解为平台级的服务层。而后，SaaS就是软件级的服务层。</p><p><strong>服务管理层</strong><br>顾名思义，是管理核心服务层的。为核心服务提供支持，进一步确保了核心服务的可靠性、可用性与安全性。</p><p><strong>用户访问接口层</strong><br>提供了客户端访问云服务的接口，使得用户不需要关系底层实现，只需要通过接口调用服务即可。方便了使用，屏蔽了底层的复杂性。</p><h3 id="数据存储（Data-Storage）"><a href="#数据存储（Data-Storage）" class="headerlink" title="数据存储（Data Storage）"></a>数据存储（Data Storage）</h3><p>云环境下的数据存储不同于传统的数据存储，传统的数据存储可能都只是涉及到一台服务器，当跨入到云环境时，就用使用到分布式系统，为保证分布式系统的有效工作，就会出现各种各样的问题。不管是传统存储还是分布式存储，都要满足下面的特性：<br>ACID</p><ul><li>原子性（Atomicity）</li><li>一致性（Consistency）</li><li>隔离性（Isolation）</li><li>持久性（Durability）</li></ul><p>BASE</p><ul><li>基本可用（Basically Available）</li><li>柔性状态（Soft State）</li><li>最终一致性（Eventually Consistency）</li></ul><p>例如谷歌的数据存储模型：Big Table</p><p><strong>数据中心：</strong> 数据中心是由大量的廉价的存储设备组成，通过上层的分布式文件系统整合为可靠的，可扩展的整体。</p><p><strong>分布式文件系统（Distributed File System）：</strong> DFS是云存储的核心，一般作为云计算的数据存储系统。案例比如：谷歌的分布式文件系统GFS（Google File System）</p><h3 id="计算模型（Computation-Model）"><a href="#计算模型（Computation-Model）" class="headerlink" title="计算模型（Computation Model）"></a>计算模型（Computation Model）</h3><p>云计算的计算模型是指可编程的并行计算框架，需要高扩展性和容错性的支持。在多核的今天，并行是提高计算性能的必由之路。典型的案例有MapReduce和Dryad。<br>MapReduce是谷歌的并行计算编程框架，运行在GFS上，设计思想：将问题分而治之，主要的功能由Map函数和Reduce函数来实现。Dryad是基于有向无环图的并行计算模型，图中的每个结点处理各自的任务，Git的版本管理也是基于有向无环图来实现的</p><h3 id="资源调度（Resource-Scheduling）"><a href="#资源调度（Resource-Scheduling）" class="headerlink" title="资源调度（Resource Scheduling）"></a>资源调度（Resource Scheduling）</h3><p><strong>云计算平台的资源调度包括：异构资源管理、资源合理调度与分配。</strong> 在普通的系统中，资源合理的调度和分配是很常见的，由于云平台是基于分布式系统的，因此不同的系统之间可能就会出现结构不同的问题，云平台的资源调度就必须具备异构资源管理的功能。</p><h3 id="虚拟化（Virtualization）"><a href="#虚拟化（Virtualization）" class="headerlink" title="虚拟化（Virtualization）"></a>虚拟化（Virtualization）</h3><p>通过虚拟化技术可以将物理上的单台服务器虚拟成逻辑上的多台服务器。每台服务器可以被单独的作为一个服务器使用，比如Colab提供的服务。通过这种分割，将闲置的处于底峰的服务器紧凑地使用起来，数据中心为云计算提供了大规模资源，通过虚拟化技术实现这些基础设施服务的按需分配。分为虚拟机快速部署和在线迁移两类技术。</p><p>从上图可以看出虚拟化技术是IaaS层的重要组成部分。虚拟化技术主要有以下特点：</p><ul><li>资源共享：物理机从逻辑上被虚拟为很多台小型机器，这些虚拟机之间可以很方便的共享该物理机上的资源。</li><li>资源定制：用户利用虚拟化技术，配置私有的服务器，指定所需的CPU 数目、内存容量、磁盘空间，实现资源的按需分配。</li><li>细粒度资源管理：通过虚拟化技术可以将物理机从逻辑上拆分成很多台更小的机器，通过对这些小型机器进行准确的管理，来实现了细粒度的管理。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KYEnglish</title>
      <link href="/2020/03/08/KYEnglish/"/>
      <url>/2020/03/08/KYEnglish/</url>
      
        <content type="html"><![CDATA[<h3 id="基于英文分词实现的考研英语真题中的单词统计"><a href="#基于英文分词实现的考研英语真题中的单词统计" class="headerlink" title="基于英文分词实现的考研英语真题中的单词统计"></a>基于英文分词实现的考研英语真题中的单词统计</h3><p><a href="https://github.com/AllenWrong/KaoYanEnglish" target="_blank" rel="noopener">数据地址</a></p><p><strong>项目当前进度</strong></p><ul><li>基本统计了2010-2018年英语一真题阅读理解中的单词</li></ul><p><strong>项目展望</strong></p><ul><li>统计2000-2009年的单词</li><li>统计2010-2018年英语二的真题单词</li><li>增加2019-2020年真题的单词</li><li>收集真题中的例句</li></ul><p><strong>招募启示</strong></p><ul><li>。。</li><li>….</li><li>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaAdMulThread</title>
      <link href="/2020/02/28/JavaAdMulThread/"/>
      <url>/2020/02/28/JavaAdMulThread/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程和并发编程"><a href="#多线程和并发编程" class="headerlink" title="多线程和并发编程"></a>多线程和并发编程</h2><blockquote><p>参考书：<a href="https://book.douban.com/subject/10484692/" target="_blank" rel="noopener">Java并发编程实战</a></p><p>项目：</p></blockquote><p>主要内容：</p><ul><li>进程和线程的区别</li><li>创建线程的方式</li><li>线程间信息共享导致的问题。导致这种问题的原因主要有哪两个，它们对应的解决方法是什么</li><li>线程的状态有哪些，它们之间是如何变换的</li><li>线程状态变换的模型</li><li>线程死锁的原因</li><li>两个主要的并发框架</li><li>并发数据结构的特点</li><li>线程协作的几种方式</li><li>定时任务的实现</li><li>经典的多线程模型</li></ul><h3 id="1、多进程和多线程？"><a href="#1、多进程和多线程？" class="headerlink" title="1、多进程和多线程？"></a>1、多进程和多线程？</h3><p>我们目前的操作系统都是多任务操作系统。那么这么说来，每个独立执行的任务就是一个进程。每个进程独立占有资源。操作系统将时间划分为多个时间片。在每个时间片内，操作系统将CPU分配给某一个任务，时间片结束后，CPU将自动回收，然后再分配给另外的任务。由于时间片非常小，所以我们感觉不出来它的变换，在我们看了计算机上的程序都是并行进行的。就行看电影，实际上它是一帧一帧的图片，而在我们看来它却是连续的。在单核CPU上只有串行，不可能实现并行。而多核CPU上多个任务可以实现并行，然而这也不是真正的并行。</p><p>由于CPU的频率提高会带来一系列的问题。所以通过提高频率来提高性能的方法已经不可行。通过提高CPU的核数来提高性能是最佳的选择。当CPU有多核时，我们可以将不同的进程分到不同的内核上，实现进程间的并行。比如4核CPU来运行4个进程，只需要一次就可以执行完，而单核CPU运行4个进程需要进行4次。</p><p>多进程使得计算机可以同时运行多个任务，每个任务占有时间片结束后，就会进行进程的切换。进程是比较庞大的，在这种庞大的物体间进行切换时非常费力费时的。因此就有一种更小的切换–在线程间进行切换，线程是比进程更小的单位，每个进程可以被划分为多个线程。线程与线程之间共享资源。</p><h3 id="2、创建线程的两种方式"><a href="#2、创建线程的两种方式" class="headerlink" title="2、创建线程的两种方式"></a>2、创建线程的两种方式</h3><ul><li><p>继承<code>Thread</code>类，实现<code>run</code>方法。</p></li><li><p>实现<code>Runnable</code>接口。</p></li></ul><p>Java有四大接口<code>Clonable</code>，<code>comparable</code>，<code>serializable</code>，<code>Runnable</code>。</p><p>多线程的启动：</p><ul><li><p>只能同<code>start()</code>方法进行启动，若直接调用<code>run()</code>方法程序就会变成串行执行。</p></li><li><p>同一个线程只能进行一次<code>start</code>。</p></li><li><p>实现<code>Runnable</code>接口时，在进行线程启动的时候需要用<code>Thread</code>类进行包装。</p></li><li><p>多个线程启动时，其先后顺序是随机的。</p></li><li><p>线程不需要关闭，在<code>run()</code>方法执行结束后，自动关闭线程。</p></li><li><p><code>main()</code>函数可能早于子线程结束。但整个程序并不终止。</p></li></ul><p><strong>实现方式的比较：</strong></p><ul><li>继承<code>Thread</code>会占有父类的名额，也就是该类就无法继承别的类了。所以不如<code>Runnable</code>方便。</li><li><code>Runnable</code>启动时需要被包装成<code>Thread</code>。但是在实现<code>Runnable</code>的对象中通过普通变量尽可以实现变量共享，而在继承<code>Thread</code>的对象中，需要使用关键字<code>Static</code>。所以<code>Runnable</code>容易实现多线程的资源共享。</li><li>建议通过实现<code>Runnable</code>接口来完成多线程。</li></ul><h3 id="3、线程间的信息共享"><a href="#3、线程间的信息共享" class="headerlink" title="3、线程间的信息共享"></a>3、线程间的信息共享</h3><p><strong>信息共享的方式。信息共享导致了数据不一致。针对不同的共享方式有不同的解决方案。</strong></p><p>通过继承<code>Thread</code>类来实现的线程类需要通过static关键字进行共享。而通过实现<code>Runnable</code>接口实现的线程类通过普通的变量就可以实现共享，而这种机制主要是因为实现<code>Runnable</code>接口的类只被实例化了一次，然后该对象会被包装四次形成4个线程对象。</p><p>如果只是简单的这么进行变量共享的话，直接导致的问题就是数据不一致。这主要是由于以下两个原因造成的：</p><ul><li>每个线程在对内存区的变量进行操作的时候，并不是直接进行操作，而是会拷贝一个工作缓存副本，对这个副本进行操作。那么显然这个副本在进程之间是不可见的。</li><li>关键步骤缺乏加锁限制。也就是说可能会存在这样的情景，多个线程同时对同一个变量进行操作。举个例子：i++。这样的操作是由4步来实现的。首先线程会将变量<code>i</code>从内存区拷贝到自己的工作缓存，然后CPU对工作缓存中的变量<code>i</code>执行加一操作，而后CPU将计算结果保存在工作缓存中，然后线程将工作缓存中的值存储到原来的内存区中。</li></ul><h4 id="volatile关键字解决工作副本的可见性"><a href="#volatile关键字解决工作副本的可见性" class="headerlink" title="volatile关键字解决工作副本的可见性"></a>volatile关键字解决工作副本的可见性</h4><p>由前面的分析可以知道。导致不一致的一个原因就是工作副本不可见。那么可以使用<code>volatile</code>关键字将工作副本变成可见的。    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        TestThread2 t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main thread is exiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TestThread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>     <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子线程不会停止</span><span class="token comment" spellcheck="true">//     volatile boolean flag = true; // 用volatile修饰的变量可以及时在各线程里面通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test thread3 is exiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，如果<code>flag</code>不加<code>volatile</code>，那么在<code>main</code>线程结束的时候，子线程并不会结束。这是因为<code>flag</code>是不可见的。在内存中的<code>flag</code>发生了变化，但是线程只会使用工作副本中的<code>flag</code>。如果使用了<code>volatile</code>关键字，那么线程工作副本中的<code>flag</code>就会随着内存中的变化而变化。但是下面有一个特殊的情况，我也未搞清楚原因：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        InnerClass innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main thread exit..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    volatile boolean flag = true;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关键步骤加锁限制"><a href="#关键步骤加锁限制" class="headerlink" title="关键步骤加锁限制"></a>关键步骤加锁限制</h4><p>给关键步骤加锁来保持同步。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadDemo threadDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadDemo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadDemo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadDemo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadDemo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加锁对象</span>    String string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 给代码块加锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 直接给函数加锁。两种方式使用一个即可</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" saled ticket "</span><span class="token operator">+</span>ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、Java多线程状态管理"><a href="#4、Java多线程状态管理" class="headerlink" title="4、Java多线程状态管理"></a>4、Java多线程状态管理</h3><p>进状态管理的目的是为了实现线程之间的同步协作，进而完成一些复杂的任务。</p><h4 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h4><ul><li>刚创建：</li><li>就绪：</li><li>运行：</li><li>阻塞：</li><li>结束：线程运行完毕，进入结束状态。这意味着线程声明周期的结束。</li></ul><p>这几种状态之间的转化是我们所关心的。进程之间的协作，主要就是进程状态的变化。创建状态可以通过<code>start</code>进入就绪状态，也可能立刻就获得了CPU进入运行态。就绪态获得CPU后就进入到了运行态。运行态失去CPU后就进入到了就绪态。就绪态和运行态之间的变化主要就是CPU的有无，而不涉及其他资源的变化。如果有其他资源的变化那么就会进入到阻塞态。线程也可以在就绪态、运行态或阻塞态直接进入结束。</p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>Thead部分已经被废弃的API：</p><ul><li>暂停：<code>suspend</code></li><li>恢复：<code>resume</code></li><li>销毁：<code>stop</code>/<code>destroy</code></li></ul><p>常用API：</p><ul><li>sleep：休眠特定时间</li><li>wait：进入等待</li><li>notify：唤醒指定线程</li><li>notifyAll：唤醒所有线程</li><li>join：等待另外一个线程结束</li><li>interrupt：向另外一个线程发送中断信号。线程收到中断信号后最对应的处理</li></ul><p><strong>生者消费者模型：</strong></p><p>先描述下这个模型，然后对这个模型进行抽象，从而设计出类。</p><p>有一个指定大小的产品仓库，用来存储产品。生产者负责生产产品，消费者会消费仓库中的产品。设计程序模拟这个过程。</p><p>【抽象】：</p><p>初步可以抽象出产品仓库，产品，生产者，消费者。四个对象。产品仓库可以用一个数组来实现，而大小我们可以可以设置为10。产品比较容易设计，比如它可以有产品ID和产品名。生产者是一个线程，它需要做的工作是生产产品，然后判断仓库是否已满，如果已满就会等待。如果还不满，那么就会进行生产。消费者也是一个线程，它需要消费产品，然后判断仓库是否为空。不为空的话，则进行消费。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Base base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        Producer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 通过修改消费者和生产者的数量来观察结果变化</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*****************************************************************************************/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Product<span class="token punctuation">[</span><span class="token punctuation">]</span> base<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Product<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> base<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Product product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Producer waiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            base<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" producted "</span><span class="token operator">+</span>product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer waiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token operator">--</span><span class="token punctuation">;</span>            Product product <span class="token operator">=</span> base<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" consumered "</span><span class="token operator">+</span>product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*****************************************************************************************/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String ID<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Product</span><span class="token punctuation">(</span>String ID<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> ID<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Product [ID="</span> <span class="token operator">+</span> ID <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*****************************************************************************************/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Base base<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Base base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">=</span> base<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> <span class="token string">"pro"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>id<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Base <span class="token function">getBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> base<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*****************************************************************************************/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Base base<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>Base base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">=</span> base<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> Base <span class="token function">getBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> base<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程的主动暂停和终止"><a href="#线程的主动暂停和终止" class="headerlink" title="线程的主动暂停和终止"></a>线程的主动暂停和终止</h4><p>在前面的<code>wait</code>，<code>notify</code>,<code>notifyAll</code>的方法都是依赖于别的线程，也就是一个线程的暂停和终止时被动的。然而，我们还希望一个线程能够主动的暂停和终止。这主要是通过定期检测共享变量来实现的。当需要暂停或终止的时候，他会首先释放资源，然后再做其他动作。因为资源是最重要的。</p><p>共享变量的机制在之间线程间的信息共享的时候已经介绍过了。这里的机制与之前的是一样的，就是利用<code>volatile</code>关键字。下面是演示程序：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        InnerClass innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 由于flag是通过volatile修饰的，所以在这里的修改可以被线程感知</span>        innerClass<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main thread exit..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exit...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、线程死锁"><a href="#5、线程死锁" class="headerlink" title="5、线程死锁"></a>5、线程死锁</h3><p>每个线程相互持有别的线程所需要的锁。而所有的线程也都不放弃所持有的锁，这时候就进入了一种死锁的状态，典型的问题是哲学家就餐问题。解决方案是对资源进行等级排序。下面是程序演示：</p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>守护线程：是一种与main函数密切相关的线程。当run方法结束时，守护线程就会结束，或者在main函数结束的时候，守护线程也会结束。定义守护线程的方法是：<code>setDaemon(true)</code>。演示代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Daemon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DaemonDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DaemonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DaemonDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 死循环，一般线程不会结束该死循环。而守护线程会结束</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deamon thread running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、并发框架"><a href="#6、并发框架" class="headerlink" title="6、并发框架"></a>6、并发框架</h3><p><strong>并行模式</strong></p><ul><li>主从模式：只有一个主线程，其他的都是从线程。主线程指挥从线程去工作。类似于C/S结构</li><li>Worker模式：点对点的模式。各个线程都平等。类似于P2P</li></ul><p><strong>Java并发编程主要包括三个部分</strong></p><p>Thread/Runable/ThreadGroup，Executor，Fork-Join。</p><h4 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h4><p>线程组实际上是线程的一种集合。将线程添加到集合中进行管理。它是树形结构的。大线程组内还可以包含小线程。可以通过enumerate方法对它进行遍历。有效性得到了保证，但是管理效率非常低，因此就决定了它使用的非常少。但是它无法解决并发编程的痛点：<strong>任务分配和执行过程高度耦合</strong>。也无法重用线程。</p><h4 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h4><p>Executor主要解决了线程的重用问题。也就是说，当我们new过一些线程后，虽然这些线程执行结束了，但是我们还可以再次使用它们。在之前的方法中，如果线程结束了，那么我们还需要继续new线程。另外Executor将任务的创建者和执行者分开了，在一定 程度上缓解了耦合问题。</p><p>线程池的理解：</p><ul><li>线程池，顾名思义就像一个池子，里面装有一定数量的线程，而且线程的数量并不是固定的，是可以弹性增长的。</li><li>线程池中的线程可以多次执行很多很小的任务。就像停车区的共享单车可以被多个人骑行。</li><li>任务的创建和执行是解耦的。</li><li>我们无需关心线程池执行任务的过程。</li></ul><p>理解线程池，有一个比较好的例子就是，共享单车的停车区，而里面的线程就像共享单车。</p><p>主要的类：</p><ul><li><code>ExecutorService</code>：线程池服务类。对线程池的抽象。可以通过<code>Executors.newFixedThreadPool(num)</code>来创建包含固定线程数量的线程池。也可以通过<code>ExecutorService.newCachedThreadPool()</code>来创建线程数量可变的线程池。</li><li><code>Callable</code>：是一个接口。与<code>Runnable</code>的区别在于run方法没有返回值，而实现<code>Callable</code>需要重写的call方法有返回值</li><li><code>Future</code>：存储线程返回结果的类</li></ul><h4 id="Fork-join"><a href="#Fork-join" class="headerlink" title="Fork-join"></a>Fork-join</h4><p>Fork-join采用的是分治的编程模式，适用于计算量无法准确评估但任务却可以逐层分解的计算任务。下面是一个计算数组和的列子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>RecursiveTask<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 需要继承RecursiveTask类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SumTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 子任务的开始索引*/</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 子任务的结束索引*/</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 最小不可分的任务所能包含的计算数量*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> THREAD_HOLD <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SumTask</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Long <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 保存计算结果</span>        Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 当分割的批量任务数小于指定的阈值时，就进行计算，不再分割</span>        <span class="token comment" spellcheck="true">// 这相当于递归的结束条件</span>        <span class="token keyword">boolean</span> canCompute <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>start<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> THREAD_HOLD<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>canCompute<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注意这里是需要小于和等于的。可以通过手算来理解</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum<span class="token operator">=</span>sum<span class="token operator">+</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 不满足条件，那么我们继续分割</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 分割</span>            <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            SumTask task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>            SumTask task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 执行上面分割的任务</span>            <span class="token function">invokeAll</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 合并结果</span>            <span class="token comment" spellcheck="true">// Join方法：Returns the result of the computation when it is done.</span>            sum <span class="token operator">=</span> task1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>task2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 返回结果</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*******************************************************************************************/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinPool<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinTask<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SumTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程池</span>        ForkJoinPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建任务。具体的任务执行细节在Compute方法中</span>        SumTask task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 提交任务</span>        ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> result <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 查看线程数量和并行度，并不是必须的</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main: Thread count is "</span> <span class="token operator">+</span> pool<span class="token punctuation">.</span><span class="token function">getActiveThreadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main: Paralelism is "</span><span class="token operator">+</span>pool<span class="token punctuation">.</span><span class="token function">getParallelism</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span><span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、并发数据结构"><a href="#7、并发数据结构" class="headerlink" title="7、并发数据结构"></a>7、并发数据结构</h3><p>传统的数据结构List，Set，Map并不是线程安全的，也就是不能保证同步，再进行多线程编程时显然是不可能使用这样的数据结构的。因此就需要一些线程安全的数据结构。下面列出了常用的数据结构及其性能分析：</p><ol><li>List<ul><li>Vector：线程安全的，适用于写多读少的情况性能较差</li><li>ArrayList：</li><li>Collections.synchronizedList()：</li><li>CopyOnWriteArrayList：基于复制实现的。适用于读多写少的情况，非阻塞容器</li></ul></li><li>Set<ul><li>HashSet：</li><li>Collections.synchronizedSet()：基于synchronized关键字实现的同步，性能较差</li><li>CopyOnWriteArraySet：基于CopyOnWriteArrayList实现的数据结构。适用于读多写少的情况，非阻塞容器。</li></ul></li><li>Map<ul><li>Hashtable：</li><li>HashMap：</li><li>Collections.synchronizedMap()：基于synchronized关键字实现的同步，性能较差</li><li>ConcurrentHashMap()：适用于读多写少的情况，非阻塞容器。</li></ul></li><li>Queue/Deque<ul><li>ConcurrentLinkedQueue：</li><li>ArrayBlockingQueue/LinkedBlockingQueue：阻塞队列</li></ul></li></ol><p>可以看出上面三种数据结构的类型基本是一样的，有适用于写多读少的情况，有适用于读多写少的情况，而且后者都是非租塞容器。另外他们都基于synchronized关键字实现了同步。</p><p>关于上面的这些数据结构只有在练习中才能理解的更加深刻。只看Demo的效果并不是很好。</p><h3 id="8、线程协作"><a href="#8、线程协作" class="headerlink" title="8、线程协作"></a>8、线程协作</h3><p>在前面的内容线程与线程之间都是独立的，没有什么交互，而仅仅保持了数据的一致性。</p><h4 id="a、Lock"><a href="#a、Lock" class="headerlink" title="a、Lock"></a>a、Lock</h4><p>Lock是synchronized的升级版。它也可以实现同步的效果。实现更复杂的临界区结构。性能更好，并且允许分离读写的操作。主要有两个类：</p><ul><li><code>ReentrantLock</code>类，可重入的互斥锁</li><li><code>ReentrantReadWriteLock</code>，可重入的读写锁</li></ul><p>主要的方法有</p><ul><li><code>tryLock()</code>：尝试这加锁，如果能加锁则进行加锁，然后进行相应的处理。如果不能加锁，也就是临界资源被别人在使用，那么继续进行下面的内容。而在之前的方法中会被阻塞。</li><li><code>lock()、unlock()</code>：加锁和释放的方法</li></ul><p>【案例】：有家奶茶店，点单有时需要排队。假设想买奶茶的人如果看到需要排队，就决定等待一会，然后再去查看是否可以购买奶茶。又假设奶茶店有老板和多名员工，记单方式比较原始，只有一个订单本。老板负责写新订单，员工不断地查看订单本得到信息来制作奶茶，在老板写新订单时员工不能看订单本，多个员工可同时看订单本，在员工看时老板不能写新订单。</p><p>分析：在这个案例中，顾客的到来是随机的，这与线程的随机性是相符的。这里的需要排队，并不是严格意义上的排队。如果真的需要排队的话，那么我们就得指定优先级。所以这里的场景实际上就是在一个时间段只有一个顾客购买奶茶，而其他人都是在等待，不能购买奶茶，至于下一个是谁购买奶茶也是随机的。因此，使用一个线程代表一个顾客，它的到来顺序是随机的。它具有的行为是买奶茶。在买奶茶的时候由于只能一个人购买，所以要加锁。用线程来抽象表示老板和员工，员工线程是多个的，老板只有一个。老板具有的行为是写订单，但是写订单的时候需要加上写锁，写完之后注意释放。员工具有的行为是读订单和制作奶茶，读订单的时候需要加上读锁，读完之后释放。下面是模拟程序：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ReentrantLock lock<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>ReentrantLock lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyMilkTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" is milking tea."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 等待工作人员制作奶茶</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" get his milk tea."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> buyMyTea <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 没有买到奶茶就继续尝试和等待</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>buyMyTea<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">buyMilkTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buyMyTea <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" Waiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*******************************************************************************************/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ReentrantReadWriteLock readWriteLock<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Worker</span><span class="token punctuation">(</span>ReentrantReadWriteLock readWriteLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>readWriteLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">viewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加锁</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" viewing order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 模拟看订单</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 看完订订单释放锁</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">viewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 模拟制作奶茶，并交付的过程。完成后继续看下一个订单</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*******************************************************************************************/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> ReentrantReadWriteLock readWriteLock<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Boss</span><span class="token punctuation">(</span>ReentrantReadWriteLock readWriteLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>readWriteLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加锁</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" writing order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 模拟写订单的过程</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 写完订单释放锁</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 老板所需要的做的只是不断的写订单。这里假设客源源不断</span>            <span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" end writing."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*******************************************************************************************/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 10个顾客</span>        Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> consumers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4个工作人员</span>        Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>consumers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            consumers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            consumers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                Thread boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boss</span><span class="token punctuation">(</span>readWriteLock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boss<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>workers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            workers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>readWriteLock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b、Semaphore"><a href="#b、Semaphore" class="headerlink" title="b、Semaphore"></a>b、Semaphore</h4><p>信号量机制也是进行线程协作的一种方法，它的机制是可以指定允许几个线程同时访问指定的临界资源。信号量实际上就是一种计数器。</p><p>Semaphore类也提供了tryAcquire()方法。</p><p>【案例1】：停车模拟。有一个车库，里面只能停5辆车，现有10辆车需要进行停放。每次停放是去申请信号量。如果不能申请到，那么就等待一会，然后再去申请。</p><p>分析：这两主要就有一个类，Car。它具有的行为是停车和离开。停车的时候首先去获取信号量，如果能获取到那么就停车，如果不能获取到那么就等待一会再去申请。循环这个过程只能完成停车并开走。主类负责整个过程的驱动。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopCar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Semaphore number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> complete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>complete<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" stop car."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                complete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" waiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        number<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" leaved."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> cars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        StopCar stopCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 匿名对象的方式。比较常用</span>            cars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stopCar<span class="token punctuation">.</span><span class="token function">parking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stopCar<span class="token punctuation">.</span><span class="token function">leave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【案例2】：哲学家就餐问题的信号量机制实现。哲学家就餐问题，这里设定有6个哲学家，6根筷子。每个哲学家只有获得到两根筷子时才能去就餐。当筷子被别的哲学家使用的时候，其他哲学家不能使用。</p><p>分析：在这里，哲学家是一个对象，将筷子抽象成信号量。哲学家所具有的行为是拿筷子，就餐和放下筷子。在拿筷子的时候需要申请信号量。就餐完毕后需要释放信号量。另外需要注意的就是。哲学家只能拿取与他相邻的两个筷子。下面是演示代码，该程序会有死锁的危险。实际上，我们可以简单地通过一个数组就可以实现信号量。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Philosophier</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 筷子信号量。6个信号量分别作用在6根筷子上。</span>    <span class="token keyword">public</span> Semaphore<span class="token punctuation">[</span><span class="token punctuation">]</span> chopSticks<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 拿筷子</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pickLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">pickRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 拿筷子失败，进入等待</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" waiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化信号量</span>    <span class="token keyword">public</span> <span class="token function">Philosophier</span><span class="token punctuation">(</span>Semaphore<span class="token punctuation">[</span><span class="token punctuation">]</span> chopSticks<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chopSticks <span class="token operator">=</span> chopSticks<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" eating."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 表示哲学家就餐的过程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" end eating."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/** 哲学家拿起左筷子*/</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">pickLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 尝试申请信号量</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chopSticks<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/** 哲学家拿起右筷子*/</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">pickRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 尝试申请信号量</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chopSticks<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chopSticks<span class="token punctuation">[</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putLeft</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chopSticks<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putRight</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>chopSticks<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>chopSticks<span class="token punctuation">[</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*******************************************************************************************/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Semaphore<span class="token punctuation">[</span><span class="token punctuation">]</span> chopSticks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chopSticks<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            chopSticks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                Thread<span class="token punctuation">[</span><span class="token punctuation">]</span> philosophiers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>philosophiers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            philosophiers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Philosophier</span><span class="token punctuation">(</span>chopSticks<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            philosophiers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c、Latch"><a href="#c、Latch" class="headerlink" title="c、Latch"></a>c、Latch</h4><p>Latch是一个等待锁，是一个同步辅助类，它的作用并不是保护临界资源的，而是用来进行等待的，在某个时刻，我们等待一下，等到所需要的线程都到达后，再继续往前进行。</p><p>主要的实现类是<code>CountDownLatch</code>。主要的方法有：<code>countDown()</code>计数减一，<code>await()</code>等带变成0。下面是示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LatchDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> studentNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始信号</span>        CountDownLatch startSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束信号</span>        CountDownLatch endSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>studentNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>studentNum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>startSignal<span class="token punctuation">,</span>endSignal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"各就位..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        startSignal<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开始信号</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 等到所有人到达终点</span>            endSignal<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比赛结束..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CountDownLatch startSignal<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CountDownLatch doneSignal<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>CountDownLatch startSignal<span class="token punctuation">,</span> CountDownLatch doneSignal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>startSignal <span class="token operator">=</span> startSignal<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>doneSignal <span class="token operator">=</span> doneSignal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 等待开始信号</span>            startSignal<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 到达终点后对信号减一</span>            doneSignal<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" arrive at the finish..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，最重要的部分就是对信号的减一以及等待所有的线程到达指定的同步点（对上面的例子而言就是同步点就是重点）。</p><h4 id="d、Barrier"><a href="#d、Barrier" class="headerlink" title="d、Barrier"></a>d、Barrier</h4><p>Barrier也是一个同步辅助类。允许多个线程在某一个点上进行同步。Barrier一种典型的应用情景就是：等到所有的子线程执行完毕后，合并它们的结果。</p><p>主要的类是<code>CyclicBarrier</code>，能够指定需要同步的线程的数量（类似于前面的endSignal），也有<code>await()</code>方法。下面是一个分行计算数组的和的例子。每个线程负责计算其中的一行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierExample</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 假定有三行数，用三个线程分别计算每一行的和，最终计算总和     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> row1<span class="token punctuation">;</span>        numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> row2<span class="token punctuation">;</span>        numbers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> row3<span class="token punctuation">;</span>                CalculateFinalResult finalResultCalculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculateFinalResult</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当有3个线程在barrier上await，就执行finalResultCalculator</span>        CyclicBarrier barrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> finalResultCalculator<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            CalculateEachRow rowCalculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculateEachRow</span><span class="token punctuation">(</span>barrier<span class="token punctuation">,</span> numbers<span class="token punctuation">,</span> i<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>rowCalculator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CalculateEachRow</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> rowNumber<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">;</span>    <span class="token keyword">final</span> CyclicBarrier barrier<span class="token punctuation">;</span>        <span class="token function">CalculateEachRow</span><span class="token punctuation">(</span>CyclicBarrier barrier<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNumber<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>barrier <span class="token operator">=</span> barrier<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numbers <span class="token operator">=</span> numbers<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rowNumber <span class="token operator">=</span> rowNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>res <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">=</span> numbers<span class="token punctuation">[</span>rowNumber<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> data<span class="token punctuation">;</span>            res<span class="token punctuation">[</span>rowNumber<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": 计算第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>rowNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"行结束，结果为: "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等待！只要超过3个(Barrier的构造参数)，就放行。</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> BrokenBarrierException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CalculateFinalResult</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> eachRowRes<span class="token punctuation">;</span>    <span class="token keyword">int</span> finalRes<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFinalResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> finalRes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">CalculateFinalResult</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> eachRowRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eachRowRes <span class="token operator">=</span> eachRowRes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> eachRowRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        finalRes <span class="token operator">=</span> sum<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果为: "</span> <span class="token operator">+</span> finalRes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="e、Phaser"><a href="#e、Phaser" class="headerlink" title="e、Phaser"></a>e、Phaser</h4><p>Phaser。同步辅助类，应用场景和Barrier的场景基本类似，不同的是Phaser可以被多次应用。Barrier只能等待一次，Phaser可以等待多次。</p><p>主要的方法是：<code>arriveAndAwaitAdvance()、arrive()</code>。下面是一个例子：假设举行考试，总共三道大题，每次下发一道题目，等所有学生完成后再进行下一道。这里主要用来演示Phaser的多次等待效果。这里需要注意的地方就是<code>Phaser phaser = new Phaser(studentNum);</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> studentNum <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// note</span>        Phaser phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span>studentNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>studentNum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Phaser phaser<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>Phaser phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doTest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// note</span>        phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doTest</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doTest</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All done."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" doing the "</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">" problem..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" end the "</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">" problem."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="f、Exchanger"><a href="#f、Exchanger" class="headerlink" title="f、Exchanger"></a>f、Exchanger</h4><p>Exchanger。是一个用于交换消息的类。允许并发线程中互相交换消息。它会在某个时刻等待另一个线程的到来，当另一个线程来到这一个时刻的时候（也就是达到了同步，这个时刻称为同步点），它们就相互交换信息，这个交换是双向的，而且只能在两个线程之间进行信息的交换。</p><p>主要的类是Exchanger。主要的方法是<code>exchange()</code>。下面是一个成绩查询的例子。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GradeSelect</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义一个exchanger</span>        Exchanger<span class="token operator">&lt;</span>String<span class="token operator">></span> exchanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exchanger</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span>exchanger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String input <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>input<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>input<span class="token operator">+</span><span class="token string">" grade is "</span><span class="token operator">+</span>exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Exchanger<span class="token operator">&lt;</span>String<span class="token operator">></span> exchanger<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Base</span><span class="token punctuation">(</span>Exchanger<span class="token operator">&lt;</span>String<span class="token operator">></span> exchanger<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>exchanger <span class="token operator">=</span> exchanger<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> exit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>exit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"zhangsan"</span><span class="token operator">:</span>                    exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">"70"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"lisi"</span><span class="token operator">:</span>                    exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">"80"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"wangwu"</span><span class="token operator">:</span>                    exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">"90"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"q"</span><span class="token operator">:</span>                    exit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 如果不返回的话会阻塞main线程</span>                    exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、定时任务"><a href="#9、定时任务" class="headerlink" title="9、定时任务"></a>9、定时任务</h3><p>在实际编程中，我们有时会希望在某个时间点执行某个任务，或者以某个周期执行某个任务。比如我之前做的一个管理系统，我们希望在数据库启动之后每隔10分钟备份一次，这是模拟的一个简单的数据库的备份功能。在Java中提供了Timer类，它是一个定时器，还有TimerTask类，它是用来封装任务的。下面依然做一个模拟数据库备份的例子。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BackUp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataBase dataBase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每5秒执行一次备份。在启动之后会先等待1秒，然后再进行执行</span>        <span class="token comment" spellcheck="true">// 实际上只有3秒的间隔，因为数据库备份时sleep了2秒</span>        timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>dataBase<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DataBase</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Database start backuping..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DataBase end backup."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在之前的这种方法中，我们只能并发的执行一个任务，当我们有多个任务的时候，我们期望并发地执行多个任务。这种需求可以通过Executor+定时器机制来实现。主要的类就是<code>ScheduleExecutorService</code>。</p><p>那么我们可以将上面的场景进行一下扩展，假设我们有多个数据库，需要在固定的时间对它们进行备份。下面是模拟程序。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupBackUp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里我们有5个数据库</span>        ScheduledExecutorService scheduledExecutorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            DataBases dataBases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataBases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 任务是dataBases,一开始推迟2秒，备份时间间隔为7秒，实际上是两秒。时间单位是Seconds</span>            scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span>dataBases<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DataBases</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doBackUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBackUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-DataBase is backing up..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-DataBae end back up."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三方库Quartz</strong></p><p>Quartz是一个较为完善的任务调度框架。解决程度中Timer零散管理的问题。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何阅读文献</title>
      <link href="/2020/02/26/HToReadaPaper/"/>
      <url>/2020/02/26/HToReadaPaper/</url>
      
        <content type="html"><![CDATA[<p>本博客是对文献《How to Read a Paper》的读后总结。<a href="http://web.stanford.edu/class/cs343/resources/how-to-read-a-paper.pdf" target="_blank" rel="noopener">原文</a></p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>这篇文章主要是大致的描述了三遍阅读法（<em>three pass method</em>），这个三遍阅读法既可用于阅读文献，也可用于文献调查。前段时间看CMU的CSAPP的课程时，就听到老师建议我们至少阅读三遍这本教材。当时不明白为什么这么做，现在我觉得那也可能是出自这里。</p><p>无论多么厉害的方法都不能缺少练习，否则方法永远学不会。无论多么厉害的方法都不能一成不变的照搬，一定要在练习中内化成适合自己的方法。</p><h3 id="Three-pass-method"><a href="#Three-pass-method" class="headerlink" title="Three pass method"></a>Three pass method</h3><p>三遍阅读法最关键的地方就是将阅读的深度划分为三个层次。这样我们在读完每一层次时都可以进行判断这篇论文的质量如何，是不是我所需要的内容，还需不需要继续深入阅读，选择坚持还是放弃。这样就能提高我们的效率，有针对性的进行阅读，避免浪费不必要的时间。</p><p>具体来看，每一遍都有指定的目标：</p><ul><li>First pass：</li><li>Second pass：</li><li>Third pass：深入理解文章，把握细节，甚至会对文章提出新的见解</li></ul><h4 id="第一遍"><a href="#第一遍" class="headerlink" title="第一遍"></a>第一遍</h4><p>第一遍，我们主要是要知道这篇文章在讲什么，第几部分是干什么的（或者子部分的主题是什么），而不需要抓住文章的内容，只是抓住内容的主题。原文说在阅读第一遍的时候大约可以花费5-10分钟的时间，我觉得在看英文文章的时候可能会花费的更久一些。</p><p>下面有一些具体的步骤和方法：</p><ol><li>仔细阅读标题，子标题，摘要部分，介绍部分</li><li>阅读子标题，或者子部分的头部内容。一般来说每一段的头部内容都是主要内容</li><li>阅读结论。从这里我们可以知道这篇文章的主要贡献，也许，我们只需要这个结论</li><li>浏览参考文献，将其中已经读过的标记出来</li></ol><p>在第一遍结束的时候你应该可以回答一下问题：</p><ul><li>这是什么类的文章</li><li>文章的内容是关于什么的，用到了什么理论</li><li>文章的假设是否可靠</li><li>文章的主要贡献是什么</li><li>文章的笔法怎么样</li></ul><p>当做完这些工作的时候，我们就可以进行做选择了。上面的这些信息足够用于判断这篇文章是否值得深入阅读。</p><p>另外这也给了我们写文章的一些启示：如果读者读了一遍我们写的文章并没有抓住文章的主要信息，那么我们的文章可能就会被放弃。</p><h4 id="第二遍"><a href="#第二遍" class="headerlink" title="第二遍"></a>第二遍</h4><p>在读第二遍的时候，我们只关注要点内容，忽略细节，这有助于记下要点内容。或者在阅读时，我们可以再页边空白处做注释。做注释是非常有效的一种方法，它一方面输出了我们的理解，加深了印象；另一方面会为防止我们忘记灵感。</p><p>下面一些具体的步骤和方法：</p><ol><li>仔细阅读图像，图表，以及一切其他说明性的内容。这里着重要说明一下：<strong>Common mistakes like these will separate rushed, shoddy work from the truly excellent.  像一些标记不好，结果是否给出了误差等等之类的错误就能够将仓促、粗糙劣质的工作与真正优秀的工作区分开。</strong> 这里给我们的启示就是一定不要觉得某些细节性的工作不重要就随便应付。</li><li>标记出还未阅读的参考文章，以便之后阅读。这主要是用来了解文献的背景的。</li></ol><p>原文中说这一边可能会花费大约一个小时的时间。在初学者阅读时一定会，而且一定要花费更多的时间去做这一遍。如果你只是参考这篇论文的话，那么读完第二遍已经足够了，不需要往下读了。因此，读完第二遍你应该抓住文章的主要内容，能够对这篇文章做出总结，甚至你可以向其他人讲解这篇论文的论文。这一遍不会涉及到证明等细节性的内容。</p><h4 id="第三遍"><a href="#第三遍" class="headerlink" title="第三遍"></a>第三遍</h4><p>第三遍阅读基本上就是研究性阅读了，对于那些想深入了解论文的人来说，读第三遍是很有必要的。第三遍的主要内容就是复现论文。复现论文具有非常主要的意义，在这个过程中你不仅可以清楚的明白作者的工作，什么还会遇得作者曾经遇到的问题和假设。也许你会遇到更多的问题，也许你有一个不错的Idea，那么在这个意义上，就可能就有机会完善作者的工作。在这个过程中，你能够见到许多的研究技巧，证明技巧，表达技巧等等，这些都是你可以学习的东西。</p><p>这个过程可能会花费4-5个小时，大约是半天的时间，不过这是值得的。最后，你应该能够清楚的描述出这篇文章的结构、优点和不足。最重要的是，你应该能够知道这篇文章最重要的假设，相关的参考文献，在实验和分析上潜在的问题等等。</p><h3 id="文献调查"><a href="#文献调查" class="headerlink" title="文献调查"></a>文献调查</h3><p>做文献调查也可以采用这种方式。不过需要阅读数十篇文章。</p><ol><li>首先我们先收集3-5篇文章。把这些文章都浏览一遍，然后读他们的相关工作部分。这样结束后，能够得到一个大纲。也许是很小的一部分，如果幸运的话，有可能是最重要的部分。</li><li>在第二步中，在参考文献中查找共享引用和重复的作者姓名。这些一般都是该领域的关键论文和研究人员。把关键论文下载下来放在一边。然后去这些研究人员的网站看看他们最近发表了什么。这将帮助您确定该领域的顶会，因为好的研究人员通常在顶级会议上发表论文。</li><li>第三步是去这些顶级会议的网站，浏览他们最近的会议记录。快速的浏览通常可以识别出最近的高质量相关工作。这些论文，连同你先前搁置的那些论文，构成了你调查的第一个版本。把这些文件翻两遍。如果他们都引用了一篇你之前没有找到的重要论文，你可以获取并阅读它，必要时进行迭代。</li></ol><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p><a href="http://people.inf.ethz.ch/troscoe/pubs/review-writing.pdf" target="_blank" rel="noopener">Writing Reviews for Systems<br>Conferences</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读文献 </tag>
            
            <tag> 文献调查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NN</title>
      <link href="/2020/02/16/NN/"/>
      <url>/2020/02/16/NN/</url>
      
        <content type="html"><![CDATA[<h2 id="从绘画入门神经网络"><a href="#从绘画入门神经网络" class="headerlink" title="从绘画入门神经网络"></a>从绘画入门神经网络</h2><p><strong>本篇文章中使用的符号</strong></p><p>最近在学习深度学习时遇到了很多问题，其中最重要的莫过于符号表示，如果连符号都理解不了，那么又怎么理解数学原理呢。看了很多深度学习的资料，最后发现还是NG大佬使用的符号最容易理解，所以，今后在学习相关内容时，统一使用NG提供的符号系统。<br>$$<br>W^{[l]}<br>$$</p><p>像上面这个$W$表示权重，$l$表示层数。</p><p>$$<br>x^{(m)}_{n}\ \ or\ \ a^{<a href="m">0</a>}_n<br>$$</p><p>$X$表示输入特征，$m$表示样本的标号，$n$特征的标号。可以说是索引。还有另外一种表示方法就是使用字母$a$，它取自activate激活的第一个字母。其中上标[0]表示第0层。</p><p>$$<br>a^{[l]}<em>{i}=f(z^{[l]}</em>{n})<br>$$</p><p>其中$a$表示第$l$层第$i$个神经元的输出值，$f$表示激活函数，$z$表示第L层第n个神经元激活函数的输入值，也就是该神经元中只经过线性计算的值。</p><h3 id="1、神经网络结构"><a href="#1、神经网络结构" class="headerlink" title="1、神经网络结构"></a>1、神经网络结构</h3><p>输入层，输出层，隐藏层。输入层又称为第0层，通常没有什么作用，在计数神经网络层数的时候一般不计入。隐藏意味着在训练过程中我们不知道它发生了什么。</p><h3 id="2、画一个三层神经网络"><a href="#2、画一个三层神经网络" class="headerlink" title="2、画一个三层神经网络"></a>2、画一个三层神经网络</h3><p>如下图，是一个三层的神经网络：</p><img style="box-shadow:0" src="/img/fullconn.png"/><h3 id="x、利用网络形状梳理计算过程"><a href="#x、利用网络形状梳理计算过程" class="headerlink" title="x、利用网络形状梳理计算过程"></a>x、利用网络形状梳理计算过程</h3><h3 id="x、从网络结构看参数的形状"><a href="#x、从网络结构看参数的形状" class="headerlink" title="x、从网络结构看参数的形状"></a>x、从网络结构看参数的形状</h3>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闪烁之狐</title>
      <link href="/2020/02/13/HexoTheme/"/>
      <url>/2020/02/13/HexoTheme/</url>
      
        <content type="html"><![CDATA[<h3 id="一、回顾Hexo的基本操作"><a href="#一、回顾Hexo的基本操作" class="headerlink" title="一、回顾Hexo的基本操作"></a>一、回顾Hexo的基本操作</h3><p>首先清空之前生成的博客页面：<code>hexo clean</code>，生成博客页面：<code>hexo g</code>，在本地运行：<code>hexo s</code>。</p><p>当然还有更加骚的操作：<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code>。一串命令下来非常的装逼。本篇文章的前提是你已经搭建好了自己的博客，也就说，你的博客能够正常显示了，或许有些文章或许没有，而且你已经熟悉了如何写自己的博客文章，如何生成博客页面，如何将生成的博客页面部署到服务器上，比如github和gitee。然后忽然发现，博客提供的基本模块不能满足自己的要求，比如我要开一个学习的页面，该怎么做呢？？？？？？</p><p>这本文章将以构建一个学习模块为例，使用<a href="https://blinkfox.github.io/" target="_blank" rel="noopener">闪烁之狐</a>的博客主题，介绍博客的扩展模式。</p><h3 id="二、创建一个学习模块"><a href="#二、创建一个学习模块" class="headerlink" title="二、创建一个学习模块"></a>二、创建一个学习模块</h3><p>闪烁之狐的主题在一开始好像只提供了首页，标签，分类，归档，关于，留言板，友情链接的模块。留言板模块基本上是一片空白，我们将在这片空白上构建自己的博客模块。先来看最基本的效果：</p><p><img src="/img/src/image-20200213145452028.png"></p><p>这是我构建的一个学习的模块，这个模块中仅仅写了一些文字，这是了解闪烁之狐的扩展模式的最简单的一步。</p><h4 id="1、生成目录文件"><a href="#1、生成目录文件" class="headerlink" title="1、生成目录文件"></a>1、生成目录文件</h4><p>首先我们需要生成一个文件夹，该文件夹下自带index.md文件。因为我们这里构建的是学习模块，所以我们生成learn文件夹：</p><pre class="line-numbers language-hexo"><code class="language-hexo">hexo new page "learn"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令后，你会在source文件夹下看的有learn文件夹，其中包含一个index.md文件。如果按照正常的方式进行生成的话，那么我们看到的效果将会是这样的：</p><p><img src="/img/src/image-20200213150012392.png"></p><p>并不是空白页。因此我们还需要做些其他的工作。下一步就是要考虑：空白页是怎么生成的呢？</p><h4 id="2、渲染成空白页"><a href="#2、渲染成空白页" class="headerlink" title="2、渲染成空白页"></a>2、渲染成空白页</h4><p>从留言板我们看到空白页，打开soruce/contact文件夹下的index.md文件我们看到这样的内容是这样的：</p><p><img src="/img/src/image-20200213150220907.png"></p><p>title和date都是一些常规标签。那么起作用的就是type和layout。打开主题目录下的layout文件，会发现有一个contact.ejs文件。该文件的作用进行对头部有layout：”contact”声明的文件进行渲染。那么我们的learn下的index.md是不是加个这种标签就可以了呢？可以试一下，你会发现生成的标题和logo与留言板是一样的。。。。因此我们需要做些改动，当然不能直接在contact.ejs中改，否则留言板也就被改掉了。</p><p>你有contact.ejs那我为什么不能建一个learn.ejs呢？？？直接新建个txt文档改掉后缀名即可。然后把contact.ejs中的代码复制进来。</p><p><img src="/img/src/image-20200213151419374.png"></p><p>可以看到复制的代码是这样的。这里我们关注箭头指向的那一行，这一行表示的是空白页的标题，<code>&amp;nbsp;</code>表示一个空格。前面的i标签表示的是logo（关于免费的logo可以在<a href="https://fontawesome.com/icons?d=gallery&m=free" target="_blank" rel="noopener">这里</a>选择）。将i标签换成<code>&lt;i class=&quot;fas fa-graduation-cap&quot;&gt;&lt;/i&gt;</code>，然后将标题改成Self-Education，并保存。</p><p>下面的方框是加载留言插件用的，在这里不必关心（如果你在构建的时候只想要的一个空白页，那么可以直接把这段删掉）。</p><p>所以，如何在首页中看到这个模块？？？？？这就是配置文件的作用。</p><h4 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h4><p>打开主题的配置文件，而不是博客根目录下的配置文件。在<code>menu：</code>下加一个子节点，其中这里的顺序与在博客中显示的顺序是一致的。字节点的内容如下：</p><pre class="line-numbers language-hexo"><code class="language-hexo">  学习:     url: /learn    icon: fas fa-list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关于在学习节点下加子节点的方法请<a href="[https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md#%E8%8F%9C%E5%8D%95%E5%AF%BC%E8%88%AA%E9%85%8D%E7%BD%AE](https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md#菜单导航配置)">参考官方文档</a>.</p><h4 id="4、本地调试"><a href="#4、本地调试" class="headerlink" title="4、本地调试"></a>4、本地调试</h4><p>使用命令：<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code>。如果出错自己百度或者debug，这里不介绍如何调bug，只是介绍扩展的方法。执行成功后就可以看到一个标题同上面展示的一样的空白页。那么如何写入文章呢？？？？？</p><p>写文章的操作跟你写其他文章的操作是一样的。打开learn文件夹，打开index.md，然后就可以写你想写的内容了。</p><p><strong>注意：这里的index.md文档不进行分类，也不进行添加标签的操作。否则会报错。它在这里只是充当一块白板，我们可以再这里自己的创造，然后被learn.ejs渲染后展示出来。</strong></p><h4 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h4><p>在开篇就说，会介绍闪烁之狐的扩展方法，可是到这里只创建了一个空白页？？？感觉自己也清楚了些，但总觉得还有些模糊？？OK，下面将通过几个问题解决你的疑惑？（其他的问题可以留言，然后我会将它们加入进来）</p><ul><li><p>在Front-matter中，type标签的作用是什么？</p><p>说实话，我也不知道。。。官方文档中并没有，不过它的值与layout的值保持一致就可以了。</p></li><li><p>ejs文件作用是什么？</p><p>ejs文件的作用主要是把你的md文件渲染成一个网页。因为你写的文章只有文字，而颜色，布局，位置，目录，页面上部的index，下部的信息，等等都要靠ejs来生成。</p></li><li><p>配置文件是怎么链接到页面的？</p></li><li><p>看不懂ejs文件怎么办？</p><p>ejs文件没必要都看懂，只了解影响到你的内容的标签即可。这需要些html，css的基础，如果你意志力不错的话，通过百度还是可以弄懂的。</p></li><li><p>出现了bug怎么办？</p><p>本篇文章不涉及与bug有关的东西，有bug可以留言，或者去官网，或者去官方群里询问，那里有很多大佬可以帮你解答。</p></li></ul><p><strong>也许这些问题并没有解决掉你的疑惑，如果你还有其他的问题，可以在下面的留言板中留言，我会进行解答。</strong></p><h3 id="三、在空白页中开发网页"><a href="#三、在空白页中开发网页" class="headerlink" title="三、在空白页中开发网页"></a>三、在空白页中开发网页</h3><p>这一部分是高阶的内容，要求有html，css的基础，我不打算进行介绍，因为再深入介绍的话就偏离了本篇博客的主题，从而进入网页开发的范畴。由于Markdown文件对html的支持，使得我们可以以index.md文件为画板进行html的开发。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>基本的思路是这样的：</p><ol><li><p>我们创建一个白色的空白页，我称之为画板。在这上面我们进行Html的开发</p></li><li><p>利用配置文件来进行数据的获取。前面简单介绍了数据的获取方式，我们完全可以在配置文件中定义一个自己的结点，比如：</p><pre class="line-numbers language-hexo"><code class="language-hexo">experience:  - time:  - unit:  - description:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后利用<code>theme.experience</code>获取该节点的内容，从而填充我们的html文件。</p></li><li><p>调式和部署</p></li></ol><p>这里介绍的内容是面向小白的，对于大神而言是小菜一碟。实际上，如果你web基础的话，将会发现很多种开发模式。不过这里的这种开发模式对于小白而言是最容易的，利用这种开发模式入门，来了解闪烁之狐的开发模式是个不错的选择。<strong>另外可以参考友情链接界面的效果，来寻找另一种扩展方式！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 闪烁之狐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闪烁之狐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jack10</title>
      <link href="/2020/02/06/Jack/Jack10/"/>
      <url>/2020/02/06/Jack/Jack10/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jack语言</title>
      <link href="/2020/02/06/Jack/Jack9/"/>
      <url>/2020/02/06/Jack/Jack9/</url>
      
        <content type="html"><![CDATA[<p><strong>计算机系统要素，从零开始构建现代计算机（nand2tetris）<br>如果完成了本书所有的项目 你将会获得以下成就</strong></p><ul><li>构建出一台计算机（在模拟器上运行）</li><li>实现一门语言和相应的语言标准库</li><li>实现一个简单的编译器</li></ul><p><strong>而且，这本书的门槛非常低，只要你能熟练运用一门编程语言即可。本课程综合了数字电路，计算机组成原理，计算机体系架构，操作系统，编译原理，数据结构等的主要内容，搭建了计算机平台的构建的框架，并未深入细节，如果需要了解细节，可由本书作为主线，逐步完善的知识体系。</strong></p><p><a href="https://github.com/AllenWrong/nand2tetris" target="_blank" rel="noopener">项目地址Github</a></p><hr><h2 id="1-本章重点内容"><a href="#1-本章重点内容" class="headerlink" title="1.本章重点内容"></a>1.本章重点内容</h2><ul><li>了解Jack语言</li></ul><h2 id="2-详细内容"><a href="#2-详细内容" class="headerlink" title="2.详细内容"></a>2.详细内容</h2><h3 id="Jack语言规范简述"><a href="#Jack语言规范简述" class="headerlink" title="Jack语言规范简述"></a>Jack语言规范简述</h3><p><strong>程序入口</strong>：与Java语言类似，Jack语言执行总是从Main类的main函数开始执行，所以每个Jack程序至少要包含一个Main类，该类必须包含一个main函数。<br><strong>函数、方法、构造函数</strong>：在类级别上的操作，类似于Java中的静态函数，用函数表示；作用在当前对象上的操作用方法表示；构造函数用于创建新的对象。<br><strong>程序结构</strong>：Jack中的基本编程单元是类。每个类存在于独立的文件中。因此Jack是一种面向对象的语言。<br><strong>变量</strong>：Jack中有四种类型的变量：成员字段，静态变量，局部变量和参数变量。<br><strong>数据类型</strong>：Jack支持三种基本数据类型：int，char，boolean。其他的数据类型，又可以称为对象类型，例如String，可以基于这些基本数据类型进行扩展。<br><strong>Array类</strong>：Jack程序使用内置的Array类来声明和构建数组，该类是Jack标准库的一部分。该类并没有指定类型，它可以包含任意类型的数据。该数组是一维的。<br><strong>Strings类</strong>：字符串使用内置类Strings来声明。<br><strong>类型转换</strong>：Jack是弱类型语言。该语言规范并没有定义从一种类型转为另一种类型的结果。类型转换主要包括这三种：字符和整数能够根据Unicode规范在必要时相互转换；整数可被赋给任何对象类型的引用变量，这时该整数被当做是内存中的地址；对象变量可被转换成Array变量，反之亦然，经过转换就可以像访问数组中的数据项一样去访问对象中的成员，反之亦然，这也是对象序列化的基本方法。<br><strong>变量的类型和作用域</strong>：静态变量定义在类这一级，被该类的素有对象共享，参考之前的内存段的划分即可理解为什么静态变量会被共享。成员字段变量用于定义类对象的属性。局部变量被子程序使用，仅存在与子程序的生存周期内，这里参考堆栈虚拟机2可以很好的理解底层原理。参数变量用于传递变量给子程序。<br><strong>表达式</strong>：Jack语言中没有定义运算符的优先级。为的是简化编译器的设计，所以涉及到优先级的表达式必须用括号显式说明优先级。<br><strong>构造函数</strong>：对象的构造可以分为两个阶段：内存分配和构造对象。内存分配阶段开辟内存段，然后创建指向该内存段的指针。构造对象阶段完成对象的构造。<br>**对象内存回收dispose()**：当对象使用完毕后必须进行内存释放，这与C编程类型，而Java却不用考虑这个问题，因为Java提供了垃圾回收机制。也许在Jack开发完成了，可以对其进行扩展，进而实现垃圾回收机制。这是操作系统提供的一种服务。</p><p><strong>本章的课程项目主要是演示和尝试去测试，对于有编程经验的人来讲几乎可以不做，本章的重点在于了解Jack语言的语法，能编写Jack程序！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统要素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jack语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机II：程序控制</title>
      <link href="/2020/02/06/Jack/Jack8/"/>
      <url>/2020/02/06/Jack/Jack8/</url>
      
        <content type="html"><![CDATA[<p><strong>计算机系统要素，从零开始构建现代计算机（nand2tetris）<br>如果完成了本书所有的项目 你将会获得以下成就</strong></p><ul><li>构建出一台计算机（在模拟器上运行）</li><li>实现一门语言和相应的语言标准库</li><li>实现一个简单的编译器</li></ul><p><strong>而且，这本书的门槛非常低，只要你能熟练运用一门编程语言即可。本课程综合了数字电路，计算机组成原理，计算机体系架构，操作系统，编译原理，数据结构等的主要内容，搭建了计算机平台的构建的框架，并未深入细节，如果需要了解细节，可由本书作为主线，逐步完善的知识体系。</strong></p><p><a href="https://github.com/AllenWrong/nand2tetris" target="_blank" rel="noopener">项目地址Github</a></p><hr><h2 id="1-本章要实现的内容"><a href="#1-本章要实现的内容" class="headerlink" title="1.本章要实现的内容"></a>1.本章要实现的内容</h2><ul><li>程序控制流命令</li><li>子程序调用命令</li></ul><h2 id="2-详细内容"><a href="#2-详细内容" class="headerlink" title="2.详细内容"></a>2.详细内容</h2><p>第七章介绍算术表达式和布尔表达式是如何利用基本堆栈操作来进行计算的。本章将继续介绍这个简单的数据结构是如何支持像嵌套子程序调用、参数传递、递归和内存分配技术这样的复杂任务。</p><h3 id="底层细节"><a href="#底层细节" class="headerlink" title="底层细节"></a>底层细节</h3><p>对于子程序调用，底层必须处理的一些细节。这些细节都可以利用堆栈来实现。如下：</p><ul><li>将参数从调用者传递给被调用者。（参数传递）</li><li>在跳转并执行被调用者之前，先保存调用者的状态。（现场保护）</li><li>为被调用者使用的局部变量分配内存空间。（内存分配）</li><li>跳转并执行被调用者。（子程序执行）</li><li>将被调用者的运行结果返回给调用者。（参数传递）</li><li>在从被调用者返回之前，回收其使用的内存空空间。</li><li>恢复调用者的状态。（现场恢复）</li><li>返回到调用语句之后的下一条语句继续执行。</li></ul><h3 id="程序控制流"><a href="#程序控制流" class="headerlink" title="程序控制流"></a>程序控制流</h3><p>主要有两种，无条件跳转和有条件跳转，在Hack计算机平台提供的汇编语言中，提供了一些条件跳转和无条件跳转指令，利用这些指令和L-Command，这部分是很容易实现的。</p><h3 id="子程序调用"><a href="#子程序调用" class="headerlink" title="子程序调用"></a>子程序调用</h3><p>子程序调用主要包含两种，调用内置指令和调用用户自己定义的子程序。调用内置指令，比如：add，sub等，在第7章都已经实现。调用用户自己定义的子程序与调用内置指令的区别在于需要使用call关键字。</p><p><strong>如何实现嵌套调用和递归调用的内存管理机制？</strong><br>主程序会调用子程序，子程序还会调用子程序，子程序也会调用子程序自身，这就形成了嵌套调用和递归调用。<br>这里要介绍一个概念：<strong>帧</strong>，它表示子程序的局部变量的集合。在这一章中，堆栈是指全局堆栈，它包括所有子程序的帧组成的，包含了第7章中介绍的堆栈，但又大于之前的堆栈。<br>在调用子程序时，需要先将call xxx命令的下一个命令的地址保存起来，作为子程序返回地址，然后将调用者的帧保存到堆栈中，这就完成了现场保护。然后调用子程序，为子程序分配堆栈空间，子程序的入口地址用xxx标记指出。当执行完子程序之后，就将被调用者的帧销毁，这样就会回到调用者的帧，这就实现了现场恢复。而被调用者可以通过返回地址回到调用者的入口地址，完成调用返回。其中的参数传递都是通过栈顶完成的。</p><p><strong>具体而言，如何实现之前介绍的八个细节？</strong><br>执行一个函数就需要将与该函数相关的local段，argument段，this段，that段的基址加载到RAM[1-4]中，这都是与函数状态相关的参数。另外还需要开辟该函数的工作栈，一般从栈顶开始的单元都可以供当前函数作为工作栈使用。</p><ol><li>在调用函数之前，我们首先要进行传递参数和现场保护。<br>传递参数是很容易实现的，具体来讲我们要记录的参数值和参数的个数，当调用函数后，被调用者根据参数的个数来计算参数的基址并保存在ARG单元中，通过基址和偏移量去参数段获取参数。<strong>这就完成了参数传递。</strong><br>现场保护主要是保存5个单元的数据：returnAddress，local，argument，this，that。returnAddress可以通过设置标识来实现，其他的都是将数据从RAM[0-4]中推入栈，<strong>这就完成了现场保护。</strong> 这5个单元的数据组成的就是帧。</li><li>当调用函数时，会执行VM命令：<code>call functionName nArgs</code><br>执行函数时，首先需要完成与本函数相关的local段，argument段，this段，that段的设置，以及工作栈的开辟。当执行call命令后，被调用函数会根据nArgs知道传递的参数的个数，argument段的基址可以根据此公式计算出来：<code>ARG=SP-5-nArgs</code>。而<code>LCL=SP</code>。this段和that段暂时还未使用到。然后根据调用的函数名调转到指定的地址即可。Hack汇编程序提供了L-Command，利用L-Command很容易实现。<strong>这就完成了程序跳转</strong>，示意图如下：<br><img src="https://img-blog.csdnimg.cn/20200130234403195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjM0Mjgz,size_16,color_FFFFFF,t_70"></li><li>进入函数执行程序：<code>function functionName nVars</code><br>进入子程序后，首先遇到的就是函数名的声明，程序根据nVars知道本函数需要开辟多大的局部变量区，实际操作可以通过重复执行nVars次<code>push 0</code>来实现，或者直接执行<code>SP=SP+nVars</code>，这样没有对局部变量区进行初始化，但一般来说效果是差不多的，不推荐使用后者。在这个过程SP会发生变化，LCL的值不会发生变化。<strong>这样就完成了局部变量区的开辟，</strong>从栈顶开始之后的栈空间都可以当做工作栈使用。当完成子函数的执行后，位于栈顶的就是返回值，从实现机制上来看，只支持一个返回值。返回之后，调用函数从栈顶可以很容易的取到返回值，<strong>这就完成了返回值的传递</strong>，示意图如下：<br><img src="https://img-blog.csdnimg.cn/20200130234315426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjM0Mjgz,size_16,color_FFFFFF,t_70"></li><li>程序返回：<code>return</code><br>首先需要得到返回地址，然后将返回值复制到argument 0中。从前面可以知道LCL是本函数相关的数据看是的地方，是调用者相关的数据结束的地方，因此我们可以用此公式来得到返回地址：<code>endFrame=*(LCL),retAddr=*(endFrame-5)</code>。此时栈顶就是返回值，因此<code>pop argument</code>即可完成返回值的传递。然后将栈顶设置在argument 0之后的单元，<strong>这一步实际上就限制了返回值只能有一个，并且完成了对内存的回收，因为调用者的帧及工作栈已经没有指针指向，变成不可操作的了。</strong> 虽然是这样，但实际上我们在之前的endFrame计算时，要对endFrame和retAddr进行临时保存，因为通过endFrame我们需要进行现场恢复，原理如下：<code>THAT=*(endFrame-1),THIS=*(endFrame-2),ARG=*(endFrame-3),LCL=*(endFrame-5)</code>。<strong>这就完成了现场恢复。然后有retAddr跳转到下一步要执行的程序处。</strong><br><img src="https://img-blog.csdnimg.cn/20200130234223276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjM0Mjgz,size_16,color_FFFFFF,t_70"></li></ol><p>在图片的旁边就是实现的伪码。在之后的部分将给出具体的实现代码。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在写本项目的过程中，除了调小的bug之外，最令人头疼的是符号的分配，以及函数递归调用时各种符号标记。比前面两个项目难度明显上升了许多。</p><p>另外，有个不解的地方就是测试文件时，StaticsTestVME.tst设置sp=261，StaticsTest.tst设置sp=256，两个测试文件在SP初值的设置时不同，导致了测试结果出问题。但是从比较文件StaticsTest.cmp上来看，他需要的确实是sp=261，而实际上，sp=261时，测试才会正确。不知是程序逻辑的问题，还是作业的漏洞。。。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统要素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆栈虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机I：堆栈运算</title>
      <link href="/2020/02/06/Jack/Jack7/"/>
      <url>/2020/02/06/Jack/Jack7/</url>
      
        <content type="html"><![CDATA[<p><strong>计算机系统要素，从零开始构建现代计算机（nand2tetris）<br>如果完成了本书所有的项目 你将会获得以下成就</strong></p><ul><li>构建出一台计算机（在模拟器上运行）</li><li>实现一门语言和相应的语言标准库</li><li>实现一个简单的编译器</li></ul><p><strong>而且，这本书的门槛非常低，只要你能熟练运用一门编程语言即可。本课程综合了数字电路，计算机组成原理，计算机体系架构，操作系统，编译原理，数据结构等的主要内容，搭建了计算机平台的构建的框架，并未深入细节，如果需要了解细节，可由本书作为主线，逐步完善的知识体系。</strong></p><p><a href="https://github.com/AllenWrong/nand2tetris" target="_blank" rel="noopener">项目地址Github</a></p><hr><h2 id="1-本章要实现的内容"><a href="#1-本章要实现的内容" class="headerlink" title="1.本章要实现的内容"></a>1.本章要实现的内容</h2><ul><li>算术逻辑命令</li><li>内存访问命令</li></ul><h2 id="2-详细内容"><a href="#2-详细内容" class="headerlink" title="2.详细内容"></a>2.详细内容</h2><h3 id="下面是一些主要内容"><a href="#下面是一些主要内容" class="headerlink" title="下面是一些主要内容"></a>下面是一些主要内容</h3><ul><li>编译器采用两层转换模型进行构建，首先高级语言将被翻译成中间代码，然后中间代码被转换成机器语言。这种划分方式有利于减少高级语言和机器语言之间的依赖性。</li><li>将高级语言翻译成中间代码的程序可以称为编译器前端程序，而将中间代码翻译成机器语言的程序可以称为编译器后端程序。比如JAVA，JAVA的源码经翻译后形成字节码文件，字节码文件是运行在java虚拟机上的，而字节码文件经翻译后得到机器语言，机器语言运行在硬件平台上。中间代码运行在虚拟机上，机器语言运行在硬件上。</li><li>在这个项目中，虚拟机语言共包含4种类型的命令：算术命令，内存访问命令，程序流程控制命令和子程序调用命令。</li><li>编译器的后端程序负责的是将中间代码翻译成机器语言，所以它与硬件平台的关系性非常大，如果我们需要运行在不同的硬件平台上，那么机器语言就会发生变化，因此后算程序就需要改变，而前端程序不需要改变，因此虚拟机可以使语言很方便的进行跨平台使用。</li><li>另外，很多语言的编译器能够共享VM后端程序，允许diamante共享和语言互用性。比如，某种语言善于科学计算，主要是因为它的中间代码被翻译成的机器语言在底层上是很高效的，如果我们能够把另一种语言编译到同样的VM层，那么另一种语言就能够获得这种高效的科学计算。</li></ul><h3 id="实现介绍"><a href="#实现介绍" class="headerlink" title="实现介绍"></a>实现介绍</h3><p><strong>在本章中实现的命令有算术逻辑命令和内存访问命令。</strong><br>算术逻辑运算主要利用堆栈来进行实现。内存访问命令，通俗来讲就是将数据从内存中拿到堆栈中和将数据从堆栈中拿到内存中。所以，这两种命令综合起来，主要实现的过程就是：将数据从内存中拿到堆栈中，然后再堆栈中进行运算，然后再将运算结果从堆栈中存到内存中。<br><strong>数据结构的实现：堆栈和虚拟内存段</strong><br>实际上再本章的project中，并不需要一个实际的数组或者列表来实现堆栈和内存段，但是要有逻辑上的概念。<br>在Hack计算机平台中，内存为32K。其中前16K作为通用RAM使用，后16K用于I/O设备的内存映像。对于前16K的通用RAM，VM将其划分为8个独立的虚拟内存段，下面是具有的划分介绍：<br><img src="https://img-blog.csdnimg.cn/20200128224540317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjM0Mjgz,size_16,color_FFFFFF,t_70"><br>argument，local，static，this，that，temp这些段在下面由具体的介绍。这里要注意两个段，constant和pointer。constant并不需要占用RAM段，它是通过直接在高级语言中使用int变量来实现。pointer段实际上就是由RAM[3]和RAM[4]组成，下面具体介绍RAM[3]，RAM[4]。<br><img src="https://img-blog.csdnimg.cn/2020012822303695.png"><br><img src="https://img-blog.csdnimg.cn/20200128223116977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjM0Mjgz,size_16,color_FFFFFF,t_70"><br>SP：初值为256，此时表示栈空<br>LCL：local段的基址并不是固定的，这并不是重要的，重要的是，我们只要记住local段的基址就可以了，至于基址是什么，等待程序进行分配<br>ARG：argument段的基址也不是固定的，我们只要记住argument段的基址就可以了<br>THIS：this段的基址也不是固定的，我们只要记住this段的基址就可以了<br>THAT：that段的基址也不是固定的，我们只要记住that段的基址就可以了<br>RAM[5-12]：这8个内存单元是直接保存的内容，而不是基址，它与之前几个单元的差别在于，对temp进行操作的时候要比对this,that,local和argument段进行操作的时候少基址的获取。对temp访问的时候直接在R5上加上偏移量就是本次存取的内存单元<br>RAM[13-15]：这3个内存单元作为通用寄存器，在本章中，主要的作用就是暂时存储从栈中弹出的数据，或者暂时存储通过基址计算出来的地址。<br>RAM[16-255]：这个段中的内存单元主要是分配为VM中的静态变量，即使用static标识的变量，在本章中使用顺序分配的方式来进行的，而在本课程提供的VMEmulator中使用的是基址和偏移量的方式来进行分配的，但这对于程序测试并没有影响，所以不必要担心这个地方<br>RAM[256-2047]：这个段是栈区，当做栈来进行使用，注意对栈进行操作的时候，要进行栈顶地址的改变<br>在本章中就使用了这些内存段。<br><strong>综合内存映射分析堆栈运算</strong><br>做好本章的项目，理解好内存映射是关键，只有理解了内存映射才能知道去哪里取数据，将数据存储到哪里。综合来看，本章的大致思路就是：从RAM[1-4]中找到基址，然后再根据偏移量计算出地址，然后去获取数据，再将数据放入堆栈中，在堆栈中完成一定操作后，再将结果从堆栈中弹出，然后放到指定的内存单元（这里实际上还需要计算基址和偏移量）。不同的是temp段，它可以直接在RAM[5]上加上偏移量得到存储单元的地址。在整个操作过程中，如果需要使用除D寄存器和A寄存器之外的寄存器暂时存储结果的时候，就会使用到RAM[13-15]的通用寄存器。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>1、按照书中7.5所推荐的实现顺序依次实现5个vm文件的转化。<br>2、对于每一个文件，先在VMEmulator中运行.vm文件和xxxxVME.tst，通过观察其每一步是如何实现的，深入理解VM语言中push，pop和各个参数的实际意义。<br>3、自己手写相关的Hack汇编语言代码，对每个内存段，都要至少写上一个例子<br>4、将转换过程用高级语言实现，测试并修改，抽象出方法，实现代码复用</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统要素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆栈虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编编译器</title>
      <link href="/2020/02/06/Jack/Jack6/"/>
      <url>/2020/02/06/Jack/Jack6/</url>
      
        <content type="html"><![CDATA[<p><strong>计算机系统要素，从零开始构建现代计算机（nand2tetris）<br>如果完成了本书所有的项目 你将会获得以下成就</strong></p><ul><li>构建出一台计算机（在模拟器上运行）</li><li>实现一门语言和相应的语言标准库</li><li>实现一个简单的编译器</li></ul><p><strong>而且，这本书的门槛非常低，只要你能熟练运用一门编程语言即可。本课程综合了数字电路，计算机组成原理，计算机体系架构，操作系统，编译原理，数据结构等的主要内容，搭建了计算机平台的构建的框架，并未深入细节，如果需要了解细节，可由本书作为主线，逐步完善的知识体系。</strong></p><p><a href="https://github.com/AllenWrong/nand2tetris" target="_blank" rel="noopener">项目地址Github</a></p><hr><h2 id="1-本章要实现的内容"><a href="#1-本章要实现的内容" class="headerlink" title="1.本章要实现的内容"></a>1.本章要实现的内容</h2><ul><li>Hack汇编编译器</li></ul><h2 id="2-详细内容"><a href="#2-详细内容" class="headerlink" title="2.详细内容"></a>2.详细内容</h2><p><strong>对于本项目而言，最困难的就是允许汇编程序使用符号来指代内存地址。</strong> 而允许汇编程序使用符号来指代内存地址却又是方便编程，提高程序可读性的一种重要的方法。而由于符号化汇编命令与其对应的二进制代码之间的关系是很简单的，所以编写汇编编译器并非是很难的任务。汇编编译器的功能并不复杂，汇编编译器对每个汇编命令的所有部分进行解析，将每个部分翻译成它对应的二进制码，并将生成的二进制码汇编成真正能被硬件执行的二进制指令。<br><strong>这里给出了一种可行的实现方案：</strong> 这里提出一个基于4个模块的汇编编译器的实现：语法分析器模块用来对输入文件进行语法分析；编码模块用来提供所有汇编命令所对应的二进制代码；符号表模块用来处理符号；另外还有一个主程序用来驱动整个编译过程。</p><ul><li>Parser（语法分析器模块）：本模块主要做的就是对命令进行获取，进行类型判断，获取符号（预定义符号，标记命令，变量）</li><li>Code（编码模块）：将Hack汇编语言助记符翻译成二进制码。</li><li>符号表模块：符号表用于建立和维持符号与其地址之间的关联。常用的有哈希表。</li><li>无符号程序的汇编编译器：这种情况意味着不用处理符号，所以只有两个阶段，第一阶段翻译无符号汇编程序，然后将其扩展成具有符号处理能力的汇编编译器。</li><li>有符号程序的汇编编译器：使用两次读取代码的方式来实现，第一遍构建符号表，但不翻译程序；第二遍翻译程序，并把符号变成地址。</li></ul><p>具体的实现参考课程或者是课本。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统要素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack汇编编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构</title>
      <link href="/2020/02/06/Jack/Jack5/"/>
      <url>/2020/02/06/Jack/Jack5/</url>
      
        <content type="html"><![CDATA[<p><strong>计算机系统要素，从零开始构建现代计算机（nand2tetris）<br>如果完成了本书所有的项目 你将会获得以下成就</strong></p><ul><li>构建出一台计算机（在模拟器上运行）</li><li>实现一门语言和相应的语言标准库</li><li>实现一个简单的编译器</li></ul><p><strong>而且，这本书的门槛非常低，只要你能熟练运用一门编程语言即可。本课程综合了数字电路，计算机组成原理，计算机体系架构，操作系统，编译原理，数据结构等的主要内容，搭建了计算机平台的构建的框架，并未深入细节，如果需要了解细节，可由本书作为主线，逐步完善的知识体系。</strong></p><p><a href="https://github.com/AllenWrong/nand2tetris" target="_blank" rel="noopener">项目地址Github</a></p><hr><h2 id="1-本章要实现的内容"><a href="#1-本章要实现的内容" class="headerlink" title="1.本章要实现的内容"></a>1.本章要实现的内容</h2><ul><li>Memory：内存，包括数据内存和指令内存，屏幕内存映像和键盘内存映像</li><li>CPU：包含A寄存器，D寄存器，ALU，PC程序计数器</li><li>Computer：完整的一个计算机平台。运行在仿真平台上</li></ul><h2 id="2-实现总结"><a href="#2-实现总结" class="headerlink" title="2.实现总结"></a>2.实现总结</h2><h3 id="Memory："><a href="#Memory：" class="headerlink" title="Memory："></a>Memory：</h3><p>输入管脚：in[16], load, address[15]<br>输出管脚：out[16]<br>Memory芯片主要由三个底层芯片构建：RAM16K，Screen，KeyBoard。同时我们必须通过这三个底层芯片来实现一个统一的逻辑地址空间，这个空间从地址0到24567。构建这个连续的地址空间的方法我们可以参考之前第三章由小RAM构建大RAM的方法。<br>内存的功能首先能够根据address选定需要进行操作的单元。<br>然后将load信号给指定的内存单元。根据load信号判断是进行写入还是继续保持。<br>下面进行地址连线：参考自计算机组成原理（注意此地址只有15位）<br>RAM16K的地址空间：000 0000 0000 0000 ~ ‭011 1111 1111 1111‬<br>屏幕内存映像的地址空间(8K)：‭100 0000 0000 0000‬ ~ ‭101 1111 1111 1111‬<br>键盘内存影响的地址空间：‭110000000000000<br>1、首先根据地址进行判断，应该将控制信号发送给哪个地址空间。可以使用DMux实现‬<br>根据第15位进行二选一，可以选出RAM和映像，然后再对选出的结果进行二选一，根据第14位进行选择可以选出屏幕和键盘。由于所给出的地址空间不会超过110000000000000‬，所以我们只需要进行一次判断就可以了，而不用考虑后面13位的判断。<br>2、然后将控制信号，输入数据和片内选择地址给各自的地址空间即可<br>Screen和Keyboard芯片都是内置好的，因此直接调用接口即可。实际上我们也可以根据第三章的方法构建自己的Screen和Keyboard</p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>输入管脚：inM[16], instruction[16], reset<br>输出管脚：outM[16], writeM, addressM[15], pc[15]<br>CPU实现的一种推荐方案：<br><img src="https://img-blog.csdnimg.cn/20200118154540944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjM0Mjgz,size_16,color_FFFFFF,t_70"><br>1、回顾一下第四章的指令格式：<br>A-指令：$0vvv\ vvvv\ vvvv\ vvvv$。MSB0，其余15位表示地址值<br>C-指令：$111a\ c_1c_2c_3c_4\ c_5c_6d_1d_2\ d_3j_1j_2j_3$。MSB为1，接着的两位无效。a位域控制与D进行计算的是A还是M，c位域是计算操作的控制，$d_1$控制是否将ALU的计算结果存在A中，$d_2$控制是否将ALU的计算结果存在D中，$d_3$控制是否将ALU的计算结果存在M中，$j_1j_2j_3$是指示调转的控制。<br>2、解码指令<br>如果是A指令，那么要将地址加载到A寄存器中，如果是C-指令，则考虑$d_1$，是否需要将ALU的计算结果保存在A寄存器中。不妨暂时将第一个Mux的控制位记为$c_m$，将A寄存器的控制位记作$c_a$。那么我们可以得到以下真值表：</p><table><thead><tr><th>[15]</th><th>$d_1$</th><th>$c_m$</th><th>$c_a$</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>由真值表我们可以得到控制位的公式：$c_m=\overline{[15]},c_a=\overline{[15]\overline{d_1}}$。<br>对于A-指令以上的工作就已经足够了。而对于C-指令我们还需要做其他的工作。<br>3、C-指令的解码<br>C指令的$d_1$位已经被解析完了。接下来从左向右开始解码。$a$是控制选择A/M的控制位，所以它应该在与指令最高位取与后给第二个Mux。$c_1 .. c_6$是控制计算函数的，所以它们应该给ALU的控制位，注意要与指令最高位取与。$d_2$是控制计算结果是否保存在D中的，所以它与指令最高位取与后作为控制信号给D寄存器，$d_3$是控制计算结果是否保存在M中的，所以它作为输出与指令最高位取与后给writeM。接下来$j_1j_2j_3$是控制跳转的，总体上来看，只有两种现象，一种是顺序执行，即PC加一，另一种是跳转到地址为A中的地址的单元。根据课本给出的编码：<br><img src="https://img-blog.csdnimg.cn/20200118160732658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjM0Mjgz,size_16,color_FFFFFF,t_70"><br>那么究竟是否需要跳转要根据ALU的计算结果进行判断，ALU有两个特别的输出信号：zr（当计算结果等于0时为1），ng（当计算结果小于零时为1）。所以我们可以推出$\overline{ng+zr}$（当计算结果大于零时为1）。结合jump域和ALU的输出结果，可以得到如下真值表：</p><table><thead><tr><th>$(j_1·ng)or(j_2·zr)or(j_3·\overline{ng+zr})$</th><th>load</th><th>inc</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>4、完成连线<br>这一步很简单，不再介绍<br>关于CPU的构建，课程有很详细的介绍，参考课程即可。个人觉得在这个过程中，最困难的就是梳理控制逻辑，使用有限状态机来梳理整个过程，更有利于深刻而清楚的理解CPU的工作过程，鉴于个人没有学习过体系结构方面的内容，并且组成原理课程并未涉及到CPU的内容，所以上述内容难免有错误出现，望各位读者不吝批评。</p><h3 id="Computer"><a href="#Computer" class="headerlink" title="Computer"></a>Computer</h3><p>输入管脚：reset<br>在构建这一部分的时候并没有什么复杂的逻辑，这就像，给了你CPU，硬盘，显示屏，内存条，显卡….等计算机组件，让我们构建一个计算机。这样看来，我们需要做的就是把他们按在主板上，并连上线就可以了。</p><h2 id="阶段总结"><a href="#阶段总结" class="headerlink" title="阶段总结"></a>阶段总结</h2><p><strong>至此，就正式完成了一个简单的计算机平台，也可以说是个计算机芯片，也可以说是个模型机，尽管它是个模型机，但是根据这个模型机的构建原理，我们可以动手使用真正的芯片来构建自己的计算机平台了。首先使用大量的原始芯片，比如Nand，DFF，我们可以构建出简单的组件，比如选择器，解码器，寄存器，RAM，这四个分别是组合逻辑和时序逻辑的典型代表。接着，我们使用这些简单组件来构建复杂的组件，构建CPU和Memory。并且，我们可以自己定义自己的指令编码规则，然后在这些组件上测试指令。然后使用这些复杂的组件来构建我们自己的计算机，尽管它看起来一定非常丑陋，但是它的意义是非凡的，这意味着我们掌握了计算机的构建方式。我们可以在上面运行01组成的机器指令，这在外行看来一定是非常厉害的，尽管我们会认为它还仅仅是个婴儿。</strong><br><strong>在这个阶段中，一开始是比较简单的，只需要简单的数据电路知识就可以完成芯片的构建，这个过程我充满了疑惑，构建的这些芯片究竟有什么作用？不过，很快这些疑惑就被解决了，在我构建完一个简单的ALU之后，我才发现，这些芯片原来都有自己的重要价值。与或非门，就想是一些简单的组件，在必要的时候起一些辅助的作用，不过大型的复杂的组合逻辑芯片都是基于这些简单的门电路。而半加器之所以称为半加器，就是因为它只完成了一半的加法，因为它忽略了进位，当真正构建出来这些芯片，并使用它们的时候，才发现原来名字是这么的直截了当，跟当初学习理论的时候感觉完全不一样。另外就是全加器，它是ALU进行运算的关键。后来的时序逻辑是有些困难，不过看到这简单的DFF，竟然能存储一个位的数据，而寄存器竟然就是由这样的一个个的DFF实现的，非常神奇。构建CPU的时候，遇到了很大的困难，分析课本上给出的实现图，一直都没有头绪，尝试了很多次，思路都很零散，没有逻辑性，几乎都快放弃了，后来在群里请教了一下前辈，得前辈的指导，我又看了一下配套的视频，然后慢慢的从分析A-指令和C-指令开始梳理自己的思路，大概用了一个下午的时间，完成了CPU的构建，并通过了测试。信心倍增，而之后的Computer的构建是很简单的，几乎一气呵成。到此，我可以说：如果我有足够的芯片，我一定能构建出来一台计算机！在接下来的阶段里，继续加油！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统要素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPU </tag>
            
            <tag> 计算机体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack机器语言规范详述</title>
      <link href="/2020/02/06/Jack/Jack4/"/>
      <url>/2020/02/06/Jack/Jack4/</url>
      
        <content type="html"><![CDATA[<p><strong>计算机系统要素，从零开始构建现代计算机（nand2tetris）<br>如果完成了本书所有的项目 你将会获得以下成就</strong></p><ul><li>构建出一台计算机（在模拟器上运行）</li><li>实现一门语言和相应的语言标准库</li><li>实现一个简单的编译器</li></ul><p><strong>而且，这本书的门槛非常低，只要你能熟练运用一门编程语言即可。本课程综合了数字电路，计算机组成原理，计算机体系架构，操作系统，编译原理，数据结构等的主要内容，搭建了计算机平台的构建的框架，并未深入细节，如果需要了解细节，可由本书作为主线，逐步完善的知识体系。</strong></p><p><a href="https://github.com/AllenWrong/nand2tetris" target="_blank" rel="noopener">项目地址Github</a></p><hr><h2 id="1-本章要完成的内容"><a href="#1-本章要完成的内容" class="headerlink" title="1.本章要完成的内容"></a>1.本章要完成的内容</h2><ul><li>乘法程序：该程序的输入值存储在R0和R1中。程序计算R0*R1的值并将其存入R2。</li><li>I/O处理程序：这个程序是个无限循环程序，它侦测键盘的输入。当按下任一键时，程序将屏幕变黑，即将“black”写入每个像素。当没有键按下时，屏幕应该被清屏。你以任何空间顺序来选择屏幕的变黑和清屏，只要连续地按一个键足够长时间，屏幕就会全黑，长时间不按键就会清屏。</li></ul><h2 id="2-内容详解"><a href="#2-内容详解" class="headerlink" title="2. 内容详解"></a>2. 内容详解</h2><h3 id="实现乘法操作"><a href="#实现乘法操作" class="headerlink" title="实现乘法操作"></a>实现乘法操作</h3><p>比如：2*3操作，在底层实现上，将其作为3个2相加来实现，因为我们前面已经实现了加法操作。可以通过伪代码来描述 一下这个过程，这个过程比较简单。</p><pre class="line-numbers language-c"><code class="language-c">    R0<span class="token punctuation">,</span>R1<span class="token punctuation">;</span>    initialize sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>R1<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        R1<span class="token operator">--</span><span class="token punctuation">;</span>        sum<span class="token operator">=</span>sum<span class="token operator">+</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现一个简单的I-O处理程序"><a href="#实现一个简单的I-O处理程序" class="headerlink" title="实现一个简单的I/O处理程序"></a>实现一个简单的I/O处理程序</h3><p>这个I/O程序比较简单，只需要在屏幕上打印黑色像素即可。项目中关于本程序的描述是这样的：Runs an infinite loop that listens to the keyboard input. When a key is pressed (any key), the program blackens the screen, i.e. writes “black” in every pixel; the screen should remain fully black as long as the key is pressed.  When no key is pressed, the program clears the screen, i.e. writes “white” in every pixel; the screen should remain fully clear as long as no key is pressed.<br>书中关于本程序的描述：这个程序是个无限循环程序，它侦测键盘的输入。当按下任一键时，程序将屏幕变黑，即将“black”写入每个像素。当没有键按下时，屏幕应该被清屏。你以任何空间顺序来选择屏幕的变黑和清屏，只要连续地按一个键足够长时间，屏幕就会全黑，长时间不按键就会清屏。<br>看完两端，便会有一个几个问题：<br>1、如何定义无限循环？<br>2、什么意味着监听到按键？<br>3、监听到按键后，如何将屏幕变黑？<br>4、如何清屏？<br>实际上这些问题并不难，重点理解这个过程。首先需要注意的是SCREEN和KBD被预定义为表示屏幕内存映像和键盘内存映像的基地址。<br>接下来我们逐个解决这些问题：<br><strong>如何定义无限循环？</strong><br>定义无限循环很简单，重点在于结束时候的跳转，只要我们保证，它总是跳转到起始位置即可，代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">(</span>LOOP<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>@LOOP<span class="token number">0</span><span class="token punctuation">;</span>JMP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>什么意味着监听到按键？</strong><br>如果有按键，那么键盘内存映像中一定不能为0，所以只要判断基地址KBD中的内容是否大于零即可。由于程序是在无限循环执行，所以只要按键不停，那么KBD的内容就不为零，程序就会一直检测到有按键，然后会一直在屏幕上打印。如果键盘内存映像中的值为0，说明没有按键，此时，应该去执行清屏操作（跳转过去的方式有多种，这里只列出了一种）。所以这个功能的代码如下：</p><pre class="line-numbers language-c"><code class="language-c">@KBDD<span class="token operator">=</span>M    <span class="token comment" spellcheck="true">// get the basic address of th keyboard memory-map</span>@FILLD<span class="token punctuation">;</span>JGT  <span class="token comment" spellcheck="true">// if D is greater than zero, jump to FILL</span>@CLEAR <span class="token comment" spellcheck="true">// if D is not greater than zero, jump to CLEAR</span><span class="token number">0</span><span class="token punctuation">;</span>JMP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如何将屏幕变黑？</strong><br>实际上这就是前面程序代码中FILL实现的功能。首先我么得确定，将那个单元变黑，实际上就是将该单元存储的值置为-1（参考补码的内容理解细节）。因此，我们要判断屏幕内存映像中第一个可用单元（当前单元）是什么，因此，我们需要一个单元来存储当前单元的地址，不妨存储在M[0]中，接着，如何判断屏幕内存映像是否已满，即屏幕已经全部置黑。这可以通过将当前单元地址与屏幕内存映像的最大单元地址进行比较，因此，我们需要来存储最大单元地址，不妨用M[1]。需要注意的是，当前单元表示的是第一个可用单元。如果没有可用单元的话，那么M[1]-M[0]&lt;0，如果等于零，则表示，最后一个单元可用。现在完成了是否已满的判断，如果满，那么我们无法写入黑色像素，直接返回LOOP，如果未满，则继续在当前单元写入黑色像素，写完之后返回LOOP。如果按键不停的话，那么循环会一直检测到按键，也就会一直执行FILL模块，每执行一次会填充一各单元的黑色像素，因此，在屏幕上看到的像素显示应该是有时间差距的，而不是连续的。本模块的代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 这段代码应该定义在LOOP之前 */</span>@SCREEND<span class="token operator">=</span>A    <span class="token comment" spellcheck="true">// get the basic address of the screen memory-map</span>@<span class="token number">0</span>M<span class="token operator">=</span>D    <span class="token comment" spellcheck="true">// store the basic address in the M[0]</span>@<span class="token number">24575</span>D<span class="token operator">=</span>A    <span class="token comment" spellcheck="true">// get the max address of the screen memory-map</span>@<span class="token number">1</span>M<span class="token operator">=</span>D    <span class="token comment" spellcheck="true">// store the max address in the M[1]</span><span class="token comment" spellcheck="true">/**************************/</span><span class="token punctuation">(</span>FILL<span class="token punctuation">)</span>@<span class="token number">1</span>    D<span class="token operator">=</span>M    <span class="token comment" spellcheck="true">// get the max address of the screen memory-map</span>@<span class="token number">0</span>D<span class="token operator">=</span>D<span class="token operator">-</span>M  <span class="token comment" spellcheck="true">// get the current address of the screen memory-map, and let the max address minus the current address</span>@LOOPD<span class="token punctuation">;</span>JLT  <span class="token comment" spellcheck="true">// if the result of this minus operation is lower then zero, jump to LOOP</span>@<span class="token number">0</span>D<span class="token operator">=</span>M   <span class="token comment" spellcheck="true">// get the current address of the screen memory-map</span>A<span class="token operator">=</span>D   <span class="token comment" spellcheck="true">// store the current address in the A register</span>M<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true">// let the value of the current address is "black"</span>@<span class="token number">0</span>    D<span class="token operator">=</span>M   <span class="token comment" spellcheck="true">// get the current address of the screen memory-map</span>D<span class="token operator">=</span>D<span class="token operator">+</span><span class="token number">1</span> <span class="token comment" spellcheck="true">// add the current address</span>M<span class="token operator">=</span>D@LOOP<span class="token number">0</span><span class="token punctuation">;</span>JMP <span class="token comment" spellcheck="true">// return to the LOOP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如何清屏？</strong><br>这个问题类似于第三个问题的反过程。当程序检测到没有按键时，就会进入清屏的子程序。然后进行清屏操作。如果要清屏，我们只需要获得程序当前地址，对它减一，然后与SCREEN比较是否小与SCREEN（因为小与SCREEN意味着清屏结束），如果大于或等于那么我们就将当前地址中的内容置零，也就是清屏。那么结束条件，前面已经提到了，就是小与SCREEN一位置结束。在这种汇编程序中，通过是将两数相减，然后跟零比较来判断两数的大小。代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">(</span>CLEAR<span class="token punctuation">)</span>@<span class="token number">0</span>D<span class="token operator">=</span>M     <span class="token comment" spellcheck="true">// get the current address</span>D<span class="token operator">=</span>D<span class="token number">-1</span>   <span class="token comment" spellcheck="true">// do the minus operation</span>@SCREEN <span class="token comment" spellcheck="true">// get the basic address</span>D<span class="token operator">=</span>D<span class="token operator">-</span>A   <span class="token comment" spellcheck="true">// let current address minus basic address</span>@LOOPD<span class="token punctuation">;</span>JLT   <span class="token comment" spellcheck="true">// do just, if D is lower than zero, jump to LOOP</span>@<span class="token number">0</span>      D<span class="token operator">=</span>M     <span class="token comment" spellcheck="true">// get the current address</span>A<span class="token operator">=</span>D     <span class="token comment" spellcheck="true">// store the current address in the A register</span>M<span class="token operator">=</span><span class="token number">0</span>     <span class="token comment" spellcheck="true">// clear the "black", in another word</span>@LOOP<span class="token number">0</span><span class="token punctuation">;</span>JMP   <span class="token comment" spellcheck="true">// return to LOOP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机系统要素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时序逻辑</title>
      <link href="/2020/02/06/Jack/Jack3/"/>
      <url>/2020/02/06/Jack/Jack3/</url>
      
        <content type="html"><![CDATA[<p><strong>计算机系统要素，从零开始构建现代计算机（nand2tetris）<br>如果完成了本书所有的项目 你将会获得以下成就</strong></p><ul><li>构建出一台计算机（在模拟器上运行）</li><li>实现一门语言和相应的语言标准库</li><li>实现一个简单的编译器</li></ul><p><strong>而且，这本书的门槛非常低，只要你能熟练运用一门编程语言即可。本课程综合了数字电路，计算机组成原理，计算机体系架构，操作系统，编译原理，数据结构等的主要内容，搭建了计算机平台的构建的框架，并未深入细节，如果需要了解细节，可由本书作为主线，逐步完善的知识体系。</strong></p><p><a href="https://github.com/AllenWrong/nand2tetris" target="_blank" rel="noopener">项目地址Github</a></p><hr><h2 id="1-本章要实现的逻辑门电路"><a href="#1-本章要实现的逻辑门电路" class="headerlink" title="1. 本章要实现的逻辑门电路"></a>1. 本章要实现的逻辑门电路</h2><ul><li>1bit寄存器，16bit寄存器</li><li>RAM8，RAM64，RAM512，RAM4K，RAM16K</li><li>程序计数器PC</li></ul><h2 id="2-内容"><a href="#2-内容" class="headerlink" title="2.内容"></a>2.内容</h2><h3 id="1位寄存器："><a href="#1位寄存器：" class="headerlink" title="1位寄存器："></a>1位寄存器：</h3><p>一个触发器可以对1位数据进行存储。因此这个1位寄存器使用一个触发器来实现。<br>输入管脚：in，load<br>输出管脚：out<br>核心代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">Mux</span><span class="token punctuation">(</span>a<span class="token operator">=</span>preout<span class="token punctuation">,</span> b<span class="token operator">=</span>in<span class="token punctuation">,</span> sel<span class="token operator">=</span>load<span class="token punctuation">,</span> out<span class="token operator">=</span>o1<span class="token punctuation">)</span><span class="token function">DFF</span><span class="token punctuation">(</span>in<span class="token operator">=</span>o1<span class="token punctuation">,</span> out<span class="token operator">=</span>preout<span class="token punctuation">,</span> out<span class="token operator">=</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="16位寄存器："><a href="#16位寄存器：" class="headerlink" title="16位寄存器："></a>16位寄存器：</h3><p>将16个一位寄存器排列起来，将时序信号作用于每个寄存器，然后每个寄存器接收一位的输入，根据时序信号确定是接收输入还是继续保持。<br>输入管脚：in[16], load<br>输出管脚：out[16]<br>伪码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">15</span>    <span class="token function">Bit</span><span class="token punctuation">(</span>in<span class="token operator">=</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> load<span class="token operator">=</span>load<span class="token punctuation">,</span> out<span class="token operator">=</span>out<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="RAM8："><a href="#RAM8：" class="headerlink" title="RAM8："></a>RAM8：</h3><p>要实现RAM8芯片，就要将一组8个寄存器排列起来。接着，必须构建一个组合逻辑，把从RAM8”in”输入端的输入值装载到被选中的某个记忆单元内。依次类推，还需要构建一个组合逻辑，其对给定的address值选择正确的寄存区，然后将它的out输出值送到RAM8的out输出上。<br>要将in[16]存储到某个单元，首先需要定位该单元，然后将数据和控制信号送给该单元。定位某个单元，也就是将控制信号通过指定的线路输出，这可以通过<strong>DMux8Way</strong>来实现。然后由于我们不知道具体是哪个单元，所以需要将数据和控制信号送个所有的单元，至于用哪个单元，完全由控制信号决定。根据address输出值很显然是个16位八选一的问题。<br>输入管脚：in[16], load, address[3]<br>输出管脚：out[16]<br>伪码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">DMux8Way</span><span class="token punctuation">(</span>in<span class="token operator">=</span>address<span class="token punctuation">,</span>out<span class="token operator">=</span>loadSignal<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">7</span>    <span class="token function">Register</span><span class="token punctuation">(</span>in<span class="token operator">=</span>in<span class="token punctuation">,</span>load<span class="token operator">=</span>loadSignal<span class="token punctuation">,</span>out<span class="token operator">=</span>out_i<span class="token punctuation">)</span><span class="token function">Mux8Way16</span><span class="token punctuation">(</span>in<span class="token operator">=</span>out_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sel<span class="token operator">=</span>address<span class="token punctuation">,</span> out<span class="token operator">=</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RAM64"><a href="#RAM64" class="headerlink" title="RAM64:"></a>RAM64:</h3><p>采用的思路是类似的，不同的是，对DMux8Way传递的地址和对Mux8Way16传递的地址时不同的。我们只需要将高三位地址传给DMux8Way和Mux8Way16让他们对芯片进行选择即可，然后将低三位地址传给RAM8作为它的地址参数，进行芯片内部的地址选择。<br>依次类推，我们可以构建RAM512，RAM4K，RAM16K……….<br>输入管脚：in[16], load, address[6]<br>输出管脚：out[16]<br>伪码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">DMux8Way</span><span class="token punctuation">(</span>in<span class="token operator">=</span>address<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>out<span class="token operator">=</span>loadSignal<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">7</span>    <span class="token function">RAM8</span><span class="token punctuation">(</span>in<span class="token operator">=</span>in<span class="token punctuation">,</span>load<span class="token operator">=</span>loadSignal<span class="token punctuation">,</span>address<span class="token operator">=</span>address<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>out<span class="token operator">=</span>out_i<span class="token punctuation">)</span><span class="token function">Mux8Way16</span><span class="token punctuation">(</span>in<span class="token operator">=</span>out_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sel<span class="token operator">=</span>address<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token operator">=</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PC程序计数器："><a href="#PC程序计数器：" class="headerlink" title="PC程序计数器："></a>PC程序计数器：</h3><p>总体上来看，inc，load，reset三个管脚的信号所实现的功能都是二选一，因此可以使用Mux16来进行实现，加一操作是非常显然的要用增量器Inc16来实现。由于PC计数器中数据有时需要改变，有时需要保持，所以还需要一个寄存器（16位）来实现。课本上是这么说的“w位计数器包含两个主要部分：一个常规的w位寄存器和组合逻辑。组合逻辑用来：(a)、执行计数功能。(b)、根据控制位的3种不同的命令值，将计数器置于正确的操作模式。提示：这个逻辑的大部分功能都已经在第2章中实现了。”<br>Inc的功能：确定是否需要对之前的数据进行加一操作，因此此二路选择器a管脚应该输入之前的数据值，b管脚应该输入加一之后的数据值。显然存储功能是由寄存器实现的，所以要想获得之前的数据值，就得从寄存器的输出管脚那里获得，因此，将寄存器的输出管脚分为两路，一路给管脚a，另一路经由增量器给管脚b。而寄存器的输入应该是上一个器件的输出。<br>load功能：确定是否加载芯片的输入值，显然b管脚连接in，而a管脚连接实现Inc功能的选择器的输出。<br>reset功能：确定是否将数据值置零，显然b管脚连接常量false，而a管脚连接实现load功能的输出。由于reset功能之后就没有控制信号了，因此reset的输出端给register的输入。这样就完成了一个简单的计数器。至于计数器的原理和细节内容还需要参考数字电路的知识。示意图，并不是规范的电路图<br><img src="https://img-blog.csdnimg.cn/20200116181028909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjM0Mjgz,size_16,color_FFFFFF,t_70"><br>输入管脚： in[16],load,inc,reset<br>输出管脚：out[16]</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统要素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时序逻辑 </tag>
            
            <tag> 寄存器 </tag>
            
            <tag> 程序计数器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jack2</title>
      <link href="/2020/02/06/Jack/Jack2/"/>
      <url>/2020/02/06/Jack/Jack2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>布尔逻辑</title>
      <link href="/2020/02/06/Jack/Jack1/"/>
      <url>/2020/02/06/Jack/Jack1/</url>
      
        <content type="html"><![CDATA[<p><strong>计算机系统要素，从零开始构建现代计算机（nand2tetris）<br>如果完成了本书所有的项目 你将会获得以下成就</strong></p><ul><li>构建出一台计算机（在模拟器上运行）</li><li>实现一门语言和相应的语言标准库</li><li>实现一个简单的编译器</li></ul><p><strong>而且，这本书的门槛非常低，只要你能熟练运用一门编程语言即可。本课程综合了数字电路，计算机组成原理，计算机体系架构，操作系统，编译原理，数据结构等的主要内容，搭建了计算机平台的构建的框架，并未深入细节，如果需要了解细节，可由本书作为主线，逐步完善的知识体系。</strong></p><p><a href="https://github.com/AllenWrong/nand2tetris" target="_blank" rel="noopener">项目地址Github</a></p><hr><h2 id="1-本章要实现的逻辑门电路"><a href="#1-本章要实现的逻辑门电路" class="headerlink" title="1. 本章要实现的逻辑门电路"></a>1. 本章要实现的逻辑门电路</h2><ul><li>and and16 （与门，16位按位与）</li><li>or or16 or8way （或门，16位按位或，8位全或）</li><li>not not16 （非门，16位按位非）</li><li>xor （异或）</li><li>mux mux16 mux4way16 mux8way16 （2选1选择器，16位2选1选择器，16位4选1选择器，16位8选1选择器）</li><li>dmux dmux4way dmux8way （解复用器，解4路复用，解8路复用）</li></ul><h2 id="2-实现总结"><a href="#2-实现总结" class="headerlink" title="2.实现总结"></a>2.实现总结</h2><p>项目从最原始的Nand门出发，其他的门电路能够通过这个门电路构建得到。所以本章中所有的门电路都是基于Nand门来实现的，需要具备的基础是根据真值表设计门电路，需要会进行公式化简，当然这并不是必须的。</p><h3 id="and门"><a href="#and门" class="headerlink" title="and门"></a>and门</h3><p>输入管脚：a，b<br>输出管脚：out<br>公式如下：$$out=\overline{\overline{ab}1}$$从公式来看使用两个与非门即可实现，其中一个输入是常量true。</p><h3 id="and16"><a href="#and16" class="headerlink" title="and16"></a>and16</h3><p>这个门是16位按位与门，对每个位执行与操作即可<br>输入管脚：a[16], b[16]<br>输出管脚：out[16];<br>伪码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">15</span><span class="token punctuation">:</span>    out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> and b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="not"><a href="#not" class="headerlink" title="not"></a>not</h3><p>非门，利用与非门实现<br>输入管脚：in<br>输出管脚：out<br>公式：$$out=\overline{\overline{in}1}$$</p><h3 id="not16"><a href="#not16" class="headerlink" title="not16"></a>not16</h3><p>16位按位非门，利用已经实现的非门对每位取非即可<br>输入管脚：in[16]<br>输出管脚：out[16]<br>伪码：    </p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">15</span><span class="token punctuation">:</span>    out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> not in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><p>或门，利用与非门和已经实现的非门来实现<br>输入管脚：a[16], b[16]<br>输出管脚：out[16]<br>公式：$$out=\overline{\overline{a}\overline{b}}$$</p><h3 id="or16"><a href="#or16" class="headerlink" title="or16"></a>or16</h3><p>16位按位或<br>输入管脚：a[16], b[16]<br>输出管脚：out[16]<br>伪码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">15</span><span class="token punctuation">:</span>    out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> or b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="or8way"><a href="#or8way" class="headerlink" title="or8way"></a>or8way</h3><p>8位全或<br>输入管脚：in[8]<br>输出管脚：out<br>伪码：</p><pre class="line-numbers language-c"><code class="language-c">out <span class="token operator">=</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> or in<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> or <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> or in<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h3><p>异或门，使用非门，与门，或门来实现，到最底层都是通过与非门实现的<br>输入管脚：a, b<br>输出管脚：out<br>公式：$$out=\overline{a}b+a\overline{b}$$</p><h3 id="mux"><a href="#mux" class="headerlink" title="mux"></a>mux</h3><p>数据选择器，又称多路选择器，根据选择位，确定输出那个值<br>输入管脚：a, b, sel<br>输出管脚：out<br>公式：（根据真值表得到公式）$$out=a\overline{sel}+bsel$$</p><h3 id="mux16"><a href="#mux16" class="headerlink" title="mux16"></a>mux16</h3><p>16位按位选择，只需对每一位分别进行选择即可<br>输入管脚：a[16], b[16],sel<br>输出管脚：out[16]<br>伪码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">15</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token number">0</span>        out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token number">1</span>        out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mux4way16"><a href="#mux4way16" class="headerlink" title="mux4way16"></a>mux4way16</h3><p>16为四选一选择器，类似分治的方法，先两两进行选择，然后再从选出的内容中进行选择<br>输入管脚：a[16], b[16], c[16], d[16], sel[2];<br>输出管脚：out[16]<br>伪码：<br>先根据，sel[0]进行选择，再根据sel[1]进行选择即可</p><pre class="line-numbers language-c"><code class="language-c">out <span class="token operator">=</span> a <span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token number">00</span>      b <span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token number">01</span>      c <span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token number">10</span>      d <span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mux8way16"><a href="#mux8way16" class="headerlink" title="mux8way16"></a>mux8way16</h3><p>16为八选一选择器，类似分治的方法，先四四进行选择，然后再从选出的两个中进行选择<br>输入管脚：a[16], b[16], c[16], d[16], e[16], f[16], g[16], h[16], sel[3]<br>输出管脚：out[16]<br>伪码：<br>先根据，sel[0..1]进行选择，再根据sel[2]进行选择即可</p><pre class="line-numbers language-c"><code class="language-c">out <span class="token operator">=</span> a <span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token number">000</span>      b <span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token number">001</span>      etc<span class="token punctuation">.</span>      h <span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token number">111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dmux"><a href="#dmux" class="headerlink" title="dmux"></a>dmux</h3><p><strong>真值表</strong> </p><table><thead><tr><th>in</th><th>sel</th><th>a</th><th>b</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>输入管脚：in, sel<br>输出管脚：a, b<br>公式：$$a=in·\overline{sel},b=in·sel$$</p><h3 id="dmux4way"><a href="#dmux4way" class="headerlink" title="dmux4way"></a>dmux4way</h3><p>解4路复用，先根据sel的第一位进行解复用，然后根据剩余的sel位，进行解复用<br>输入管脚：in, sel[2]<br>输出管脚：a, b, c, d</p><h3 id="dmux8way"><a href="#dmux8way" class="headerlink" title="dmux8way"></a>dmux8way</h3><p>解8路复用，先根据sel的前两位进行解4路复用，然后根据剩余的sel位，进行解复用<br>输入管脚：in, sel[3]<br>输出管脚：a, b, c, d, e, f, g, h<br>实际上：解复用器，就相当于由sel指定信号的输出路，由其中两路能确定4划分，每种划分中还包含两路，所以，根据剩余的sel位进行指定确定的路。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机系统要素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布尔逻辑 </tag>
            
            <tag> 与或非 </tag>
            
            <tag> 选择器 </tag>
            
            <tag> 译码器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络动画演示</title>
      <link href="/2019/12/10/Computer-network/"/>
      <url>/2019/12/10/Computer-network/</url>
      
        <content type="html"><![CDATA[<p><strong>转载请注明！动画源自：<a href="https://wps.pearsoned.com/ecs_kurose_compnetw_6/216/55463/14198700.cw/index.html" target="_blank" rel="noopener">https://wps.pearsoned.com/ecs_kurose_compnetw_6/216/55463/14198700.cw/index.html</a></strong><br><strong>如有侵权，联系<a href="mailto:&#56;&#56;&#x34;&#x36;&#x39;&#x31;&#x38;&#x39;&#x36;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;">&#56;&#56;&#x34;&#x36;&#x39;&#x31;&#x38;&#x39;&#x36;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;</a>进行删除</strong></p><h3 id="传输延迟与传播延迟"><a href="#传输延迟与传播延迟" class="headerlink" title="传输延迟与传播延迟"></a>传输延迟与传播延迟</h3><p><strong>Transmission versus Propagation Delay</strong></p><p> This simple interactive animation illustrates one of the most fundamental concepts in computer networking: transmission delay versus propagation delay.  Although this concept is discussed in detail in Chapter 1, an "interactive animation speaks a thousand words".  You set the length of the link, the packet size, and the transmission speed; the interactive  animation shows the packet being sent from sender to receiver.</p> <p>Note that for many combinations, the head of the packet reaches the receiver before  transmission is finished at the sender.</p><div style="text-align:center">    <iframe width="1000px" height="190px" frameborder="0" src="/netScr/src1.html"></iframe></div><h3 id="排队和损失动画"><a href="#排队和损失动画" class="headerlink" title="排队和损失动画"></a>排队和损失动画</h3><p><strong>Queuing and Loss Interactive Animation</strong></p><p> As we learned in Chapter 1, the most complicated and interesting component of end-to-end delay  is queuing delay.  In this interactive animation, you specify the packet arrival rate and the link  transmission  speed.  You'll then see packets arrive and queue for service. When the queue becomes full, you'll see  the queue overflow--that is, packet loss.</p>  <p> A particularly interesting case is when the emission and transmission rates are the same, for  example when both are 500 packets/sec. If you let the interactive animation run for a very long time, you'll eventually see the queue  fill up and overflow.  Indeed when the two rates are the same (that is, ρ = 1), the queue grows without bound (with random inter-arrival times), as described in the text.</p><div style="text-align:center">    <iframe width="1000px" height="200px" frameborder="0" src="/netScr/src2.html"></iframe></div><h3 id="消息片"><a href="#消息片" class="headerlink" title="消息片"></a>消息片</h3><p><strong>Message Segmentation</strong></p><p>With this interactive animation, you will see why packet switching can have a smaller end-to-end delay than message switching. In this interactive animation there are four nodes: a  source (node A), a destination (node B), and two intermediate store-and-forward switches. Each packet sent from the source must be transmitted over three links before it reaches the destination. Each of these links has a transmission rate of 4 kbps and an optional propagation delay of one second.</p> <p>Each small rectangle represents 1 kbit of data. When you press Start, the rectangles are  grouped into one packet in the source's transmit buffer. The packet is transmitted to the first  switch, where it must be stored before it can be forwarded. The packet then continues towards  the destination.</p>  <p>To simulate message switching, set the packet size equal to the message size. To simulate packet switching, set the packet size to less than the message size. To examine the effect of link propagation delays, check the appropriate boxes for optional propagation delays. It is highly recommended that you calculate the end-to-end delay analytically and then verify your calculation with the interactive animation.</p><div style="text-align:center">    <iframe width="1000px" height="610px" frameborder="0" src="/netScr/src3.html"></iframe></div><h3 id="Http延迟估算"><a href="#Http延迟估算" class="headerlink" title="Http延迟估算"></a>Http延迟估算</h3><p><strong>HTTP Delay Estimation</strong></p><p>This interactive animation visually illustrates HTTP delays for the retrieval of a Web page consisting of a base HTML page and a number of objects. The interactive animation assumes that all objects  are of the same size (including HTML object). The user is allowed to make certain choices, including the number of objects (in addition to the HTML object) and the transmission delay in terms of the RTT.</p> <p>Based on these inputs from the user, the interactive animation shows the total response time in terms of RTTs. Additionally, the interactive animation provides the total response time from the  moment a Web page is requested to the time when the complete Web page is obtained.</p><div style="text-align:center">    <iframe width="1000px" height="800px" frameborder="0" src="/netScr/src4.html"></iframe></div><h3 id="DNS中的递归迭代查询"><a href="#DNS中的递归迭代查询" class="headerlink" title="DNS中的递归迭代查询"></a>DNS中的递归迭代查询</h3><p><strong>Recursive/Iterative Queries in DNS</strong></p><p>In Chapter 2 of the text the authors give examples of recursive and iterative DNS queries. This DNS interactive animation animates additional combinations of iterative and recursive queries among four name servers.</p><div style="text-align:center">    <iframe width="1000px" height="555px" frameborder="0" src="/netScr/src5.html"></iframe></div><h3 id="GBN协议"><a href="#GBN协议" class="headerlink" title="GBN协议"></a>GBN协议</h3><p><strong>Go-Back-N Protocol.</strong></p><p>This interactive animation brings to life the Go-Back-N protocol. In this demo, the sending window limits the sender to a maximum of 5 outstanding, unacked data packets. To create new data packets, click "Send New". This action will begin moving data packets between sender and receiver. To simulate loss, select a moving data packet or ack, and then press "Kill Packet/Ack". Use "Pause" and "Resume" to make selecting easier. Speed up or slow down the simulation by clicking "Faster" or "Slower". BE PATIENT for retransmissions (i.e., timeouts). </p><div style="text-align:center">    <iframe width="1000px" height="800px" frameborder="0" src="/netScr/src6.html"></iframe></div><h3 id="选择重复协议"><a href="#选择重复协议" class="headerlink" title="选择重复协议"></a>选择重复协议</h3><p><strong>Selective Repeat Protocol.</strong></p><p>This interactive animation brings to life the Selective Repeat protocol. In this demo, the sending window limits the sender to a maximum of 5 outstanding, unpacked data packets. To create new data packets, click "Send New". This action will begin moving data packets between sender and receiver. To simulate loss, select a moving data packet or ack, and then press "Kill Packet/Ack". Use "Pause" and "Resume" to make selecting easier. Speed up or slow down the simulation by clicking "Faster" or "Slower". BE PATIENT for retransmissions (i.e., timeouts).</p><div style="text-align:center">    <iframe width="1000px" height="700px" frameborder="0" src="/netScr/src7.html"></iframe></div><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p><strong>Flow Control</strong></p><p>This interactive animation shows the interaction between the sending application, the TCP send buffer, the TCP receive buffer, and the receiving application. The receiving application reads chunks of bytes at random times. When the receive buffer becomes full, the TCP receiver advertises a receive window of 0. As described in the text, the sender then continues to send segments with one byte of data.</p><div style="text-align:center">    <iframe width="1000px" height="450px" frameborder="0" src="/netScr/src8.html"></iframe></div><strong>Notes:</strong><ol><li>Host B consumes data in 2Kbyte chunks at random times.</li>  <li>When Host A receives an acknowledgment with WIN=0, Host A sends a packet with one byte of data. It is assumed for simplicity, that this one byte is not comsumed by the receiver.  </li></ol><h3 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h3><p><strong>TCP congestion control</strong></p><p> TCP congestion control is described in Chapter 3 of the text. In this interactive animation, you can view how TCP behaves when multiple clients are sending data over the same link. You may add stations either before or during the simulation. (The default is one station.) When the maximum amount of bandwidth is consumed, all of the sending clients reduce their transmissions rates, depending on the recovery method (Reno or Tahoe).</p>  <p> The green background in the graph shows the total amount of consumed bandwidth. The "3 ack's" button and the "timeout" button trigger the corresponding event for that particular workstation. The "Reno" and "Tahoe" buttons set the recovery method for that particular workstation. The sliders can be used to adjust the speed and the maximum bandwidth. </p><div style="text-align:center">    <iframe width="1000px" height="660px" frameborder="0" src="/netScr/src9.html"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
